{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Nothing here yet :/","title":"Home"},{"location":"api/auth/","text":"POST /api/auth/login \u2693\ufe0e POST /api/auth/login \u2693\ufe0e tries to log you into the specified account JavaScript const fetch = require ( \"node-fetch\" ) const response = await fetch ( \"/api/auth/login\" , { method : \"POST\" , headers : { Content - Type : \"application/json\" }, body : { \"username\" : \"string\" , \"password\" : \"string\" } }) //responds with the jwt token console . log ( await response . json ()) /* { \"token\": \"string\" } */ Python import requests r = requests . post ( url = \"/api/auth/login\" , headers = { Content - Type : \"application/json\" } body = body , ) #responds with the jwt token print ( r . json ()) \"\"\" { \"token\": \"string\" } \"\"\" GET /api/auth/whoami \u2693\ufe0e GET /api/auth/whoami \u2693\ufe0e retrieves informations about the currently used token JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/auth/whoami\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) //responds with informations about your token console . log ( await response . json ()) /* \"NOT_IMPLEMENTED\" */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/auth/whoami\" , headers = { Authorization : \"Bearer %s \" % token } ) #responds with informations about your token print ( r . json ()) \"\"\" \"NOT_IMPLEMENTED\" \"\"\" POST /api/auth/invite \u2693\ufe0e POST /api/auth/invite \u2693\ufe0e use and consume a login token in order to gain access to an additional instance JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/auth/invite\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"username\" : \"string\" , \"password\" : \"string\" , \"token\" : \"string\" } }) console . log ( await response . json ()) /* { \"token\": \"string\" } */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/auth/invite\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body = body , ) print ( r . json ()) \"\"\" { \"token\": \"string\" } \"\"\" POST /api/auth/register \u2693\ufe0e POST /api/auth/register \u2693\ufe0e creates an user with an invite token JavaScript const fetch = require ( \"node-fetch\" ) const response = await fetch ( \"/api/auth/register\" , { method : \"POST\" , headers : { Content - Type : \"application/json\" }, body : { \"username\" : \"string\" , \"password\" : \"string\" , \"token\" : \"string\" } }) console . log ( await response . json ()) /* { \"token\": \"string\" } */ Python import requests r = requests . post ( url = \"/api/auth/register\" , headers = { Content - Type : \"application/json\" } body = body , ) print ( r . json ()) \"\"\" { \"token\": \"string\" } \"\"\"","title":"/auth"},{"location":"api/auth/#post-apiauthlogin","text":"tries to log you into the specified account JavaScript const fetch = require ( \"node-fetch\" ) const response = await fetch ( \"/api/auth/login\" , { method : \"POST\" , headers : { Content - Type : \"application/json\" }, body : { \"username\" : \"string\" , \"password\" : \"string\" } }) //responds with the jwt token console . log ( await response . json ()) /* { \"token\": \"string\" } */ Python import requests r = requests . post ( url = \"/api/auth/login\" , headers = { Content - Type : \"application/json\" } body = body , ) #responds with the jwt token print ( r . json ()) \"\"\" { \"token\": \"string\" } \"\"\" GET /api/auth/whoami","title":"\u2693\ufe0e POST /api/auth/login"},{"location":"api/auth/#get-apiauthwhoami","text":"retrieves informations about the currently used token JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/auth/whoami\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) //responds with informations about your token console . log ( await response . json ()) /* \"NOT_IMPLEMENTED\" */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/auth/whoami\" , headers = { Authorization : \"Bearer %s \" % token } ) #responds with informations about your token print ( r . json ()) \"\"\" \"NOT_IMPLEMENTED\" \"\"\" POST /api/auth/invite","title":"\u2693\ufe0e GET /api/auth/whoami"},{"location":"api/auth/#post-apiauthinvite","text":"use and consume a login token in order to gain access to an additional instance JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/auth/invite\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"username\" : \"string\" , \"password\" : \"string\" , \"token\" : \"string\" } }) console . log ( await response . json ()) /* { \"token\": \"string\" } */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/auth/invite\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body = body , ) print ( r . json ()) \"\"\" { \"token\": \"string\" } \"\"\" POST /api/auth/register","title":"\u2693\ufe0e POST /api/auth/invite"},{"location":"api/auth/#post-apiauthregister","text":"creates an user with an invite token JavaScript const fetch = require ( \"node-fetch\" ) const response = await fetch ( \"/api/auth/register\" , { method : \"POST\" , headers : { Content - Type : \"application/json\" }, body : { \"username\" : \"string\" , \"password\" : \"string\" , \"token\" : \"string\" } }) console . log ( await response . json ()) /* { \"token\": \"string\" } */ Python import requests r = requests . post ( url = \"/api/auth/register\" , headers = { Content - Type : \"application/json\" } body = body , ) print ( r . json ()) \"\"\" { \"token\": \"string\" } \"\"\"","title":"\u2693\ufe0e POST /api/auth/register"},{"location":"installation/","text":"Installation \u2693\ufe0e In order to install VeniceRCON you will need to have NodeJS and npm preinstalled on your server #install dependencies npm install #install ts-node globally sudo npm install -g ts-node #copy the default config.default.yaml to config.yaml #and edit the configuration to your needs cp config.default.yaml config.yaml #start the tool with npm start","title":"Installation"},{"location":"installation/#installation","text":"In order to install VeniceRCON you will need to have NodeJS and npm preinstalled on your server #install dependencies npm install #install ts-node globally sudo npm install -g ts-node #copy the default config.default.yaml to config.yaml #and edit the configuration to your needs cp config.default.yaml config.yaml #start the tool with npm start","title":"Installation"},{"location":"plugin/meta/","text":"Plugin meta.yaml \u2693\ufe0e The plugins meta.yaml describes multiple properties of a plugin, currently it should looke like this: #name of the plugin name : \"Test Plugin\" #description of the plugin description : \"plugin to test the rcon plugin interface\" #the version string for the plugin version : \"1.0.0\" #plugin language type currently only \"JS\" is supported backend : \"BF3\" #plugin entry point entry : \"index.js\" vars : #arbitary key to identify the config entry in the config object - name : \"foo\" #meaningful description which can describe a key on the webinterface description : \"set a value for foo\" #type of the value which gets used, available types are: #string, boolean, number type : \"string\" #default value which will be set if there is a null value default : \"baz\" - name : \"bar\" description : \"set a value for bar\" type : \"number\" default : 0","title":"Meta"},{"location":"plugin/meta/#plugin-metayaml","text":"The plugins meta.yaml describes multiple properties of a plugin, currently it should looke like this: #name of the plugin name : \"Test Plugin\" #description of the plugin description : \"plugin to test the rcon plugin interface\" #the version string for the plugin version : \"1.0.0\" #plugin language type currently only \"JS\" is supported backend : \"BF3\" #plugin entry point entry : \"index.js\" vars : #arbitary key to identify the config entry in the config object - name : \"foo\" #meaningful description which can describe a key on the webinterface description : \"set a value for foo\" #type of the value which gets used, available types are: #string, boolean, number type : \"string\" #default value which will be set if there is a null value default : \"baz\" - name : \"bar\" description : \"set a value for bar\" type : \"number\" default : 0","title":"Plugin meta.yaml"},{"location":"plugin/overview/","text":"Plugin Concept \u2693\ufe0e Each Battlefield Instance gets its own worker assigned where it can run their Plugin inside, this allows to run possible blocking Plugins not affecting other instances because the NodeJS main event loop gets blocked. Plugin Installation \u2693\ufe0e There is a dedicated Folder for Plugins, in order to create a new Plugin simply create an additional sub folder and create 2 files with following structure | root |- plugins |-- your_plugin |--- meta.yaml |--- index.js meta.yaml meta.yaml will hold the basic configurations of your plugin index.js this is the entry point for your plugin and should export a single function","title":"Overview"},{"location":"plugin/overview/#plugin-concept","text":"Each Battlefield Instance gets its own worker assigned where it can run their Plugin inside, this allows to run possible blocking Plugins not affecting other instances because the NodeJS main event loop gets blocked.","title":"Plugin Concept"},{"location":"plugin/overview/#plugin-installation","text":"There is a dedicated Folder for Plugins, in order to create a new Plugin simply create an additional sub folder and create 2 files with following structure | root |- plugins |-- your_plugin |--- meta.yaml |--- index.js meta.yaml meta.yaml will hold the basic configurations of your plugin index.js this is the entry point for your plugin and should export a single function","title":"Plugin Installation"},{"location":"plugin/script/","text":"A Plugin should export a single function which receives a single argument which consists of following parameters: export interface PluginProps { /** config parameters from the webinterface */ config : Record < string , any > /** the vu-rcon instance */ battlefield : Battlefield /** declared dependencies from other modules */ dependency : Record < string , any > /** logger instance */ logger : Logger /** router instance */ router : PluginRouter } /** * @param {PluginProps} data */ module . exports = ({ logger }) => { logger . info ( \"Hello from plugin test\" ) router . get ( \"somename\" , ({ next }) => next ({ message : \"Hello from the plugin\" })) }","title":"Script"},{"location":"plugin/types/Logger/","text":"Logger \u2693\ufe0e Logger is a simple way to communicate to the Webinterface, you can communicate info messages, error messages or other export interface Logger { info ( message : string ) : void warn ( message : string ) : void error ( message : string ) : void }","title":"Logger"},{"location":"plugin/types/Logger/#logger","text":"Logger is a simple way to communicate to the Webinterface, you can communicate info messages, error messages or other export interface Logger { info ( message : string ) : void warn ( message : string ) : void error ( message : string ) : void }","title":"Logger"},{"location":"plugin/types/PluginRouter/","text":"Plugin Router \u2693\ufe0e The Plugin Router enables to receive data and respond http requests from the VeniceRCON API messages will be received from /api/plugins/{instanceId}/{pluginName}/{route} . instanaceId is the id of the instance the plugin runs on\\ pluginName is the name of the plugin which will be identified by its folder name\\ route is the route defined in the router Note For route parameter only ^[\\w\\d]+$ is allowed! declare type Context = { /** possible payload which has been sent **/ body : any /** respond with data back to the frontend */ send : ( data : any ) => void } declare type RouterCallback = ( ctx : Context ) => void export interface PluginRouter { /** GET requests */ get ( name : string , callback : PluginRouter.RouterCallback ) : PluginRouter /** POST requests */ post ( name : string , callback : PluginRouter.RouterCallback ) : PluginRouter /** PATCH requests */ patch ( name : string , callback : PluginRouter.RouterCallback ) : PluginRouter /** DELETE requests */ delete ( name : string , callback : PluginRouter.RouterCallback ) : PluginRouter }","title":"PluginRouter"},{"location":"plugin/types/PluginRouter/#plugin-router","text":"The Plugin Router enables to receive data and respond http requests from the VeniceRCON API messages will be received from /api/plugins/{instanceId}/{pluginName}/{route} . instanaceId is the id of the instance the plugin runs on\\ pluginName is the name of the plugin which will be identified by its folder name\\ route is the route defined in the router Note For route parameter only ^[\\w\\d]+$ is allowed! declare type Context = { /** possible payload which has been sent **/ body : any /** respond with data back to the frontend */ send : ( data : any ) => void } declare type RouterCallback = ( ctx : Context ) => void export interface PluginRouter { /** GET requests */ get ( name : string , callback : PluginRouter.RouterCallback ) : PluginRouter /** POST requests */ post ( name : string , callback : PluginRouter.RouterCallback ) : PluginRouter /** PATCH requests */ patch ( name : string , callback : PluginRouter.RouterCallback ) : PluginRouter /** DELETE requests */ delete ( name : string , callback : PluginRouter.RouterCallback ) : PluginRouter }","title":"Plugin Router"},{"location":"scopes/","text":"Permission Scopes \u2693\ufe0e Permission Scopes are being saved as a bitmask, their validity can be for only a specific instance or globally. scope bit description INSTANCE#ACCESS 0x01 read access for an instance INSTANCE#CREATE 0x02 create an instance INSTANCE#UPDATE 0x04 modify an instance INSTANCE#DELETE 0x08 delete an instance INSTANCEUSER#ACCESS 0x100 read access for an instance INSTANCEUSER#CREATE 0x200 create invite tokens for an instance INSTANCEUSER#UPDATE 0x400 update permissions from an instace INSTANCEUSER#REMOVE 0x800 remove users from an instance BAN#ACCESS 0x010000 view the current ban list BAN#CREATE 0x020000 create bans BAN#DELETE 0x040000 remove bans PLAYER#KILL 0x01000000 kill a player PLAYER#KICK 0x02000000 kick a player PLAYER#MESSAGE 0x04000000 messages a player PLAYER#MOVE 0x08000000 moves a player MAP#SWITCH 0x0100000000 change map MAP#MANAGE 0x0200000000 delete or add new maps RESERVEDSLOT#ACCESS 0x010000000000 access the reserved slot list RESERVEDSLOT#CREATE 0x020000000000 adds someone to reserved slot list RESERVEDSLOT#DELETE 0x020000000000 deletes someone from the reserved slot list PLUGIN#ACCESS 0x01000000000000 access plugin informations PLUGIN#MODIFY 0x02000000000000 modify settings of plugins VARIABLE#MODIFY 0x0200000000000000 modify variables EVENT#CHAT 0x010000000000000000 access chat events MOD#ACCESS 0x0200000000000000000 access mod related data MOD#CREATE 0x0200000000000000000 add mods MOD#UPDATE 0x0200000000000000000 update mod related stuff MOD#DELETE 0x0200000000000000000 delete mods","title":"Permissions"},{"location":"scopes/#permission-scopes","text":"Permission Scopes are being saved as a bitmask, their validity can be for only a specific instance or globally. scope bit description INSTANCE#ACCESS 0x01 read access for an instance INSTANCE#CREATE 0x02 create an instance INSTANCE#UPDATE 0x04 modify an instance INSTANCE#DELETE 0x08 delete an instance INSTANCEUSER#ACCESS 0x100 read access for an instance INSTANCEUSER#CREATE 0x200 create invite tokens for an instance INSTANCEUSER#UPDATE 0x400 update permissions from an instace INSTANCEUSER#REMOVE 0x800 remove users from an instance BAN#ACCESS 0x010000 view the current ban list BAN#CREATE 0x020000 create bans BAN#DELETE 0x040000 remove bans PLAYER#KILL 0x01000000 kill a player PLAYER#KICK 0x02000000 kick a player PLAYER#MESSAGE 0x04000000 messages a player PLAYER#MOVE 0x08000000 moves a player MAP#SWITCH 0x0100000000 change map MAP#MANAGE 0x0200000000 delete or add new maps RESERVEDSLOT#ACCESS 0x010000000000 access the reserved slot list RESERVEDSLOT#CREATE 0x020000000000 adds someone to reserved slot list RESERVEDSLOT#DELETE 0x020000000000 deletes someone from the reserved slot list PLUGIN#ACCESS 0x01000000000000 access plugin informations PLUGIN#MODIFY 0x02000000000000 modify settings of plugins VARIABLE#MODIFY 0x0200000000000000 modify variables EVENT#CHAT 0x010000000000000000 access chat events MOD#ACCESS 0x0200000000000000000 access mod related data MOD#CREATE 0x0200000000000000000 add mods MOD#UPDATE 0x0200000000000000000 update mod related stuff MOD#DELETE 0x0200000000000000000 delete mods","title":"Permission Scopes"},{"location":"socket/instance/","text":"INSTANCE#ADD \u2693\ufe0e /** * socket got added to an instance * @property {object} event * @property {number} event.id the instance which has been changed * @property {object} event.state current state of the instance */ socket . on ( \"INSTANCE#ADD\" , event => { console . log ( \"got added to instance\" , event . id , event . state . serverinfo . name ) }) INSTANCE#UPDATE \u2693\ufe0e /** * instance property has been changed inside the state * @property {object} event * @property {number} event.id the instance which has been changed * @property {[string, string|number|boolean|undefined|(number|string|boolean)[]][]>} event.changes */ socket . on ( \"INSTANCE#UPDATE\" , event => { console . log ( `received updates for instance with id ${ event . id } ` , event . changes ) }) INSTANCE#REMOVE \u2693\ufe0e /** * removes instance, either permissions have been revoked or instance has been deleted * @property {object} event * @property {number} event.id the instance which should get removed */ socket . on ( \"INSTANCE#REMOVE\" , event => { console . log ( `removed from instance ${ event . id } ` ) }) INSTANCE#CHAT \u2693\ufe0e /** * gets emitted when a chat event gets received from the server * @property {object} event see https://alliance-apps.github.io/VeniceRCON-documentation/api/#/Events/get_api_instances__instanceId__events_chat */ socket . on ( \"INSTANCE#CHAT\" , event => { //do stuff here }) INSTANCE#KILL \u2693\ufe0e /** * gets emitted when a kill event gets received from the server * @property {object} event see https://alliance-apps.github.io/VeniceRCON-documentation/api/#/Events/get_api_instances__instanceId__events_kill */ socket . on ( \"INSTANCE#KILL\" , event => { //do stuff here }) INSTANCE#LOG \u2693\ufe0e /** * gets emitted when one or more log messages gets received * @property {object[]} event */ socket . on ( \"INSTANCE#LOG\" , event => { //do stuff here })","title":"Instance"},{"location":"socket/instance/#instanceadd","text":"/** * socket got added to an instance * @property {object} event * @property {number} event.id the instance which has been changed * @property {object} event.state current state of the instance */ socket . on ( \"INSTANCE#ADD\" , event => { console . log ( \"got added to instance\" , event . id , event . state . serverinfo . name ) })","title":"INSTANCE#ADD"},{"location":"socket/instance/#instanceupdate","text":"/** * instance property has been changed inside the state * @property {object} event * @property {number} event.id the instance which has been changed * @property {[string, string|number|boolean|undefined|(number|string|boolean)[]][]>} event.changes */ socket . on ( \"INSTANCE#UPDATE\" , event => { console . log ( `received updates for instance with id ${ event . id } ` , event . changes ) })","title":"INSTANCE#UPDATE"},{"location":"socket/instance/#instanceremove","text":"/** * removes instance, either permissions have been revoked or instance has been deleted * @property {object} event * @property {number} event.id the instance which should get removed */ socket . on ( \"INSTANCE#REMOVE\" , event => { console . log ( `removed from instance ${ event . id } ` ) })","title":"INSTANCE#REMOVE"},{"location":"socket/instance/#instancechat","text":"/** * gets emitted when a chat event gets received from the server * @property {object} event see https://alliance-apps.github.io/VeniceRCON-documentation/api/#/Events/get_api_instances__instanceId__events_chat */ socket . on ( \"INSTANCE#CHAT\" , event => { //do stuff here })","title":"INSTANCE#CHAT"},{"location":"socket/instance/#instancekill","text":"/** * gets emitted when a kill event gets received from the server * @property {object} event see https://alliance-apps.github.io/VeniceRCON-documentation/api/#/Events/get_api_instances__instanceId__events_kill */ socket . on ( \"INSTANCE#KILL\" , event => { //do stuff here })","title":"INSTANCE#KILL"},{"location":"socket/instance/#instancelog","text":"/** * gets emitted when one or more log messages gets received * @property {object[]} event */ socket . on ( \"INSTANCE#LOG\" , event => { //do stuff here })","title":"INSTANCE#LOG"},{"location":"socket/self/","text":"SELF#PERMISSION_UPDATE \u2693\ufe0e /** * gets fired when own permissions have been updated */ socket . on ( \"SELF#PERMISSION_UPDATE\" , () => { //get new permissions via /api/auth/whoami })","title":"Self"},{"location":"socket/self/#selfpermission_update","text":"/** * gets fired when own permissions have been updated */ socket . on ( \"SELF#PERMISSION_UPDATE\" , () => { //get new permissions via /api/auth/whoami })","title":"SELF#PERMISSION_UPDATE"}]}