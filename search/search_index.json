{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Nothing here yet :/","title":"Home"},{"location":"installation/","text":"Installation In order to install VeniceRCON you will need to have NodeJS and npm preinstalled on your server #install dependencies npm install #install ts-node globally sudo npm install -g ts-node #copy the default config.default.yaml to config.yaml #and edit the configuration to your needs cp config.default.yaml config.yaml #start the tool with npm start","title":"Installation"},{"location":"installation/#installation","text":"In order to install VeniceRCON you will need to have NodeJS and npm preinstalled on your server #install dependencies npm install #install ts-node globally sudo npm install -g ts-node #copy the default config.default.yaml to config.yaml #and edit the configuration to your needs cp config.default.yaml config.yaml #start the tool with npm start","title":"Installation"},{"location":"plugin/meta/","text":"Plugin meta.yaml The plugins meta.yaml describes multiple properties of a plugin, currently it should looke like this: #name of the plugin name: \"Test Plugin\" #description of the plugin description: \"plugin to test the rcon plugin interface\" #the version string for the plugin version: \"1.0.0\" #plugin language type currently only \"JS\" is supported backend: \"BF3\" #plugin entry point entry: \"index.js\" vars: #arbitary key to identify the config entry in the config object - name: \"foo\" #meaningful description which can describe a key on the webinterface description: \"set a value for foo\" #type of the value which gets used, available types are: #string, boolean, number type: \"string\" #default value which will be set if there is a null value default: \"baz\" - name: \"bar\" description: \"set a value for bar\" type: \"number\" default: 0","title":"Meta"},{"location":"plugin/meta/#plugin-metayaml","text":"The plugins meta.yaml describes multiple properties of a plugin, currently it should looke like this: #name of the plugin name: \"Test Plugin\" #description of the plugin description: \"plugin to test the rcon plugin interface\" #the version string for the plugin version: \"1.0.0\" #plugin language type currently only \"JS\" is supported backend: \"BF3\" #plugin entry point entry: \"index.js\" vars: #arbitary key to identify the config entry in the config object - name: \"foo\" #meaningful description which can describe a key on the webinterface description: \"set a value for foo\" #type of the value which gets used, available types are: #string, boolean, number type: \"string\" #default value which will be set if there is a null value default: \"baz\" - name: \"bar\" description: \"set a value for bar\" type: \"number\" default: 0","title":"Plugin meta.yaml"},{"location":"plugin/overview/","text":"Plugin Concept Each Battlefield Instance gets its own worker assigned where it can run their Plugin inside, this allows to run possible blocking Plugins not affecting other instances because the NodeJS main event loop gets blocked. Plugin Installation There is a dedicated Folder for Plugins, in order to create a new Plugin simply create an additional sub folder and create 2 files with following structure | root |- plugins |-- your_plugin |--- meta.yaml |--- index.js meta.yaml Meta yaml will hold configurations of your plugin index.js this is the entry point for your plugin","title":"Overview"},{"location":"plugin/overview/#plugin-concept","text":"Each Battlefield Instance gets its own worker assigned where it can run their Plugin inside, this allows to run possible blocking Plugins not affecting other instances because the NodeJS main event loop gets blocked.","title":"Plugin Concept"},{"location":"plugin/overview/#plugin-installation","text":"There is a dedicated Folder for Plugins, in order to create a new Plugin simply create an additional sub folder and create 2 files with following structure | root |- plugins |-- your_plugin |--- meta.yaml |--- index.js","title":"Plugin Installation"},{"location":"plugin/overview/#metayaml","text":"Meta yaml will hold configurations of your plugin","title":"meta.yaml"},{"location":"plugin/overview/#indexjs","text":"this is the entry point for your plugin","title":"index.js"},{"location":"plugin/script/","text":"Entry point of a Plugin looks like following: /** * @typedef {Object} Logger * @property {(message: string) => void} info * @property {(message: string) => void} warn * @property {(message: string) => void} error */ /** * * @param {object} data * @param {Record<string, any>} data.config configuration with the key value pairs from meta.yaml * @param {Battlefield} data.battlefield rcon connection to the battlefield server see https://github.com/Multivit4min/vu-rcon * @param {object} data.dependency optional depdendencies which has been defined in meta.yaml * @param {Logger} logger logger instance to log messages to frontend and database */ module.exports = ({ logger }) => { logger.info(\"Hello from plugin test\") }","title":"Script"},{"location":"scopes/","text":"Permission Scopes Permission Scopes are being saved as a bitmask, their validity can be for only a specific instance or globally. scope bit description INSTANCE#ACCESS 0x01 read access for an instance INSTANCE#CREATE 0x02 create an instance INSTANCE#UPDATE 0x04 modify an instance INSTANCE#DELETE 0x08 delete an instance INSTANCEUSER#ACCESS 0x100 read access for an instance INSTANCEUSER#CREATE 0x200 create invite tokens for an instance INSTANCEUSER#UPDATE 0x400 update permissions from an instace INSTANCEUSER#REMOVE 0x800 remove users from an instance BAN#ACCESS 0x010000 view the current ban list BAN#CREATE 0x020000 create bans BAN#DELETE 0x040000 remove bans PLAYER#KILL 0x01000000 kill a player PLAYER#KICK 0x02000000 kick a player PLAYER#MESSAGE 0x04000000 messages a player PLAYER#MOVE 0x08000000 moves a player MAP#SWITCH 0x0100000000 change map MAP#MANAGE 0x0200000000 delete or add new maps RESERVEDSLOT#ACCESS 0x010000000000 access the reserved slot list RESERVEDSLOT#CREATE 0x020000000000 adds someone to reserved slot list RESERVEDSLOT#DELETE 0x020000000000 deletes someone from the reserved slot list PLUGIN#ACCESS 0x01000000000000 access plugin informations PLUGIN#MODIFY 0x02000000000000 modify settings of plugins VARIABLE#MODIFY 0x0200000000000000 modify variables EVENT#CHAT 0x010000000000000000 access chat events MOD#ACCESS 0x0200000000000000000 access mod related data MOD#CREATE 0x0200000000000000000 add mods MOD#UPDATE 0x0200000000000000000 update mod related stuff MOD#DELETE 0x0200000000000000000 delete mods","title":"Permissions"},{"location":"scopes/#permission-scopes","text":"Permission Scopes are being saved as a bitmask, their validity can be for only a specific instance or globally. scope bit description INSTANCE#ACCESS 0x01 read access for an instance INSTANCE#CREATE 0x02 create an instance INSTANCE#UPDATE 0x04 modify an instance INSTANCE#DELETE 0x08 delete an instance INSTANCEUSER#ACCESS 0x100 read access for an instance INSTANCEUSER#CREATE 0x200 create invite tokens for an instance INSTANCEUSER#UPDATE 0x400 update permissions from an instace INSTANCEUSER#REMOVE 0x800 remove users from an instance BAN#ACCESS 0x010000 view the current ban list BAN#CREATE 0x020000 create bans BAN#DELETE 0x040000 remove bans PLAYER#KILL 0x01000000 kill a player PLAYER#KICK 0x02000000 kick a player PLAYER#MESSAGE 0x04000000 messages a player PLAYER#MOVE 0x08000000 moves a player MAP#SWITCH 0x0100000000 change map MAP#MANAGE 0x0200000000 delete or add new maps RESERVEDSLOT#ACCESS 0x010000000000 access the reserved slot list RESERVEDSLOT#CREATE 0x020000000000 adds someone to reserved slot list RESERVEDSLOT#DELETE 0x020000000000 deletes someone from the reserved slot list PLUGIN#ACCESS 0x01000000000000 access plugin informations PLUGIN#MODIFY 0x02000000000000 modify settings of plugins VARIABLE#MODIFY 0x0200000000000000 modify variables EVENT#CHAT 0x010000000000000000 access chat events MOD#ACCESS 0x0200000000000000000 access mod related data MOD#CREATE 0x0200000000000000000 add mods MOD#UPDATE 0x0200000000000000000 update mod related stuff MOD#DELETE 0x0200000000000000000 delete mods","title":"Permission Scopes"},{"location":"socket/instance/","text":"INSTANCE#ADD /** * socket got added to an instance * @property {object} event * @property {number} event.id the instance which has been changed * @property {object} event.state current state of the instance */ socket.on(\"INSTANCE#ADD\", event => { console.log(\"got added to instance\", event.id, event.state.serverinfo.name) }) INSTANCE#UPDATE /** * instance property has been changed inside the state * @property {object} event * @property {number} event.id the instance which has been changed * @property {[string, string|number|boolean|undefined|(number|string|boolean)[]][]>} event.changes */ socket.on(\"INSTANCE#UPDATE\", event => { console.log(`received updates for instance with id ${event.id}`, event.changes) }) INSTANCE#REMOVE /** * removes instance, either permissions have been revoked or instance has been deleted * @property {object} event * @property {number} event.id the instance which should get removed */ socket.on(\"INSTANCE#REMOVE\", event => { console.log(`removed from instance ${event.id}`) }) INSTANCE#CHAT /** * gets emitted when a chat event gets received from the server * @property {object} event see https://alliance-apps.github.io/VeniceRCON-documentation/api/#/Events/get_api_instances__instanceId__events_chat */ socket.on(\"INSTANCE#CHAT\", event => { //do stuff here }) INSTANCE#KILL /** * gets emitted when a kill event gets received from the server * @property {object} event see https://alliance-apps.github.io/VeniceRCON-documentation/api/#/Events/get_api_instances__instanceId__events_kill */ socket.on(\"INSTANCE#KILL\", event => { //do stuff here }) INSTANCE#LOG /** * gets emitted when one or more log messages gets received * @property {object[]} event */ socket.on(\"INSTANCE#LOG\", event => { //do stuff here })","title":"Instance"},{"location":"socket/instance/#instanceadd","text":"/** * socket got added to an instance * @property {object} event * @property {number} event.id the instance which has been changed * @property {object} event.state current state of the instance */ socket.on(\"INSTANCE#ADD\", event => { console.log(\"got added to instance\", event.id, event.state.serverinfo.name) })","title":"INSTANCE#ADD"},{"location":"socket/instance/#instanceupdate","text":"/** * instance property has been changed inside the state * @property {object} event * @property {number} event.id the instance which has been changed * @property {[string, string|number|boolean|undefined|(number|string|boolean)[]][]>} event.changes */ socket.on(\"INSTANCE#UPDATE\", event => { console.log(`received updates for instance with id ${event.id}`, event.changes) })","title":"INSTANCE#UPDATE"},{"location":"socket/instance/#instanceremove","text":"/** * removes instance, either permissions have been revoked or instance has been deleted * @property {object} event * @property {number} event.id the instance which should get removed */ socket.on(\"INSTANCE#REMOVE\", event => { console.log(`removed from instance ${event.id}`) })","title":"INSTANCE#REMOVE"},{"location":"socket/instance/#instancechat","text":"/** * gets emitted when a chat event gets received from the server * @property {object} event see https://alliance-apps.github.io/VeniceRCON-documentation/api/#/Events/get_api_instances__instanceId__events_chat */ socket.on(\"INSTANCE#CHAT\", event => { //do stuff here })","title":"INSTANCE#CHAT"},{"location":"socket/instance/#instancekill","text":"/** * gets emitted when a kill event gets received from the server * @property {object} event see https://alliance-apps.github.io/VeniceRCON-documentation/api/#/Events/get_api_instances__instanceId__events_kill */ socket.on(\"INSTANCE#KILL\", event => { //do stuff here })","title":"INSTANCE#KILL"},{"location":"socket/instance/#instancelog","text":"/** * gets emitted when one or more log messages gets received * @property {object[]} event */ socket.on(\"INSTANCE#LOG\", event => { //do stuff here })","title":"INSTANCE#LOG"},{"location":"socket/self/","text":"SELF#PERMISSION_UPDATE /** * gets fired when own permissions have been updated */ socket.on(\"SELF#PERMISSION_UPDATE\", () => { //get new permissions via /api/auth/whoami })","title":"Self"},{"location":"socket/self/#selfpermission_update","text":"/** * gets fired when own permissions have been updated */ socket.on(\"SELF#PERMISSION_UPDATE\", () => { //get new permissions via /api/auth/whoami })","title":"SELF#PERMISSION_UPDATE"}]}