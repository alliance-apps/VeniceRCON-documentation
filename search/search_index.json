{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This is the Home of the VeniceRCON Software Documentation! Beginners Guide Installation Manual Development Plugin Guides Plugin Development Section HTTP API Socket.io Documentation Rest API Documentation","title":"Home"},{"location":"api/","text":"This API uses JWT Tokens for authentication! In order to send the Authentication Header please consider using following format: ### gets information about the token GET http://127.0.0.1:8000/api/auth/whoami Authorization: Bearer JWT_TOKEN_HERE All responses bodies are either empty or use JSON as response text, response body varies depending on route JWT Refresh Token The API will occasionally send as response header a new JWT Token before the old one runs out! This will be sent via the Authorization: Bearer ...JWT TOKEN... , when you receive this header you should take this token and use the new one provided by the api!","title":"General"},{"location":"api/auth/","text":"POST /api/auth/login tries to log you into the specified account JavaScript const fetch = require ( \"node-fetch\" ) const response = await fetch ( \"/api/auth/login\" , { method : \"POST\" , headers : { Content - Type : \"application/json\" }, body : { \"username\" : \"string\" , \"password\" : \"string\" } }) //responds with the jwt token console . log ( await response . json ()) /* { \"token\": \"string\" } */ Python import requests r = requests . post ( url = \"/api/auth/login\" , headers = { Content - Type : \"application/json\" } body : { \"username\" : \"string\" , \"password\" : \"string\" } ) #responds with the jwt token print ( r . json ()) \"\"\" { \"token\": \"string\" } \"\"\" GET /api/auth/whoami retrieves informations about the currently used token JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/auth/whoami\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) //responds with informations about your token console . log ( await response . json ()) /* { \"permissions\": [ { \"instance?\": 0, \"root?\": false, \"scopes\": [ \"string\" ] } ], \"token\": { \"id\": 0, \"username\": \"string\", \"iat\": 0 } } */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/auth/whoami\" , headers = { Authorization : \"Bearer %s \" % token } ) #responds with informations about your token print ( r . json ()) \"\"\" { \"permissions\": [ { \"instance?\": 0, \"root?\": false, \"scopes\": [ \"string\" ] } ], \"token\": { \"id\": 0, \"username\": \"string\", \"iat\": 0 } } \"\"\" POST /api/auth/invite use and consume a login token in order to gain access to an additional instance JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/auth/invite\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"token\" : \"string\" } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/auth/invite\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"token\" : \"string\" } ) POST /api/auth/register creates an user with an invite token JavaScript const fetch = require ( \"node-fetch\" ) const response = await fetch ( \"/api/auth/register\" , { method : \"POST\" , headers : { Content - Type : \"application/json\" }, body : { \"username\" : \"string\" , \"password\" : \"string\" , \"token\" : \"string\" } }) console . log ( await response . json ()) /* { \"token\": \"string\" } */ Python import requests r = requests . post ( url = \"/api/auth/register\" , headers = { Content - Type : \"application/json\" } body : { \"username\" : \"string\" , \"password\" : \"string\" , \"token\" : \"string\" } ) print ( r . json ()) \"\"\" { \"token\": \"string\" } \"\"\" POST /api/auth/forgot-password sends a new password to the provided mail address if smtp has been setup JavaScript const fetch = require ( \"node-fetch\" ) const response = await fetch ( \"/api/auth/forgot-password\" , { method : \"POST\" , headers : { Content - Type : \"application/json\" }, body : { \"email\" : \"string\" } }) Python import requests r = requests . post ( url = \"/api/auth/forgot-password\" , headers = { Content - Type : \"application/json\" } body : { \"email\" : \"string\" } ) POST /api/auth/update-self updates the current users password and email (if newEmail is null then it will get deleted JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/auth/update-self\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"currentPassword\" : \"string\" , \"password?\" : \"string\" , \"email?\" : \"string|null\" } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/auth/update-self\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"currentPassword\" : \"string\" , \"password?\" : \"string\" , \"email?\" : \"string|null\" } ) POST /api/auth/search-player searches for a specific player, either by guid or name, or combined JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/auth/search-player\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"guid?\" : \"string\" , \"name?\" : \"string\" } }) //collected player from this instance console . log ( await response . json ()) /* [ { \"id\": \"string\", \"name\": \"string\", \"guid\": \"string\" } ] */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/auth/search-player\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"guid?\" : \"string\" , \"name?\" : \"string\" } ) #collected player from this instance print ( r . json ()) \"\"\" [ { \"id\": \"string\", \"name\": \"string\", \"guid\": \"string\" } ] \"\"\" GET /api/auth/binding lists bound players for your current token JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/auth/binding\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) //retrieves all player bindings for this user console . log ( await response . json ()) /* [ { \"id\": \"string\", \"name\": \"string\", \"guid\": \"string\" } ] */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/auth/binding\" , headers = { Authorization : \"Bearer %s \" % token } ) #retrieves all player bindings for this user print ( r . json ()) \"\"\" [ { \"id\": \"string\", \"name\": \"string\", \"guid\": \"string\" } ] \"\"\" POST /api/auth/binding creates a binding between your token and player JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/auth/binding\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"playerId\" : 0 } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/auth/binding\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"playerId\" : 0 } ) DELETE /api/auth/binding/:id removes a binding between your token and player JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/auth/binding/:id\" , { method : \"DELETE\" , headers : { Authorization : `Bearer ${ token } ` } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . delete ( url = \"/api/auth/binding/:id\" , headers = { Authorization : \"Bearer %s \" % token } )","title":"/auth"},{"location":"api/instance/","text":"GET /api/instances retrieve a list of instances you have access to Required Scopes: INSTANCE#ACCESS JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) //responds with an array of available instances console . log ( await response . json ()) /* [ { \"id\": 0, \"host\": \"string\", \"port\": 0, \"name\": \"string\", \"version\": \"BF3|VU\", \"state\": 0, \"serverinfo\": { \"name\": \"string\", \"slots\": 0, \"totalSlots\": 0, \"mode\": \"string\", \"map\": \"string\", \"roundsPlayed\": 0, \"roundsTotal\": 0, \"scores\": [ 0 ], \"targetScore\": 0, \"onlineState\": \"string\", \"ranked\": false, \"punkBuster\": false, \"password\": false, \"uptime\": 0, \"roundTime\": 0, \"address\": \"string\", \"punkBusterVersion\": \"string\", \"joinQueueEnabled\": false, \"region\": \"string\", \"closestPingSite\": \"string\", \"country\": \"string\", \"matchmaking\": false }, \"players\": null, \"maps\": [ { \"map\": \"string\", \"mode\": \"string\", \"rounds\": 0, \"index\": 0 } ], \"vars\": \"_UNKNOWN_\", \"mapInfo\": { \"index\": 0, \"next\": 0 } } ] */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/instances\" , headers = { Authorization : \"Bearer %s \" % token } ) #responds with an array of available instances print ( r . json ()) \"\"\" [ { \"id\": 0, \"host\": \"string\", \"port\": 0, \"name\": \"string\", \"version\": \"BF3|VU\", \"state\": 0, \"serverinfo\": { \"name\": \"string\", \"slots\": 0, \"totalSlots\": 0, \"mode\": \"string\", \"map\": \"string\", \"roundsPlayed\": 0, \"roundsTotal\": 0, \"scores\": [ 0 ], \"targetScore\": 0, \"onlineState\": \"string\", \"ranked\": false, \"punkBuster\": false, \"password\": false, \"uptime\": 0, \"roundTime\": 0, \"address\": \"string\", \"punkBusterVersion\": \"string\", \"joinQueueEnabled\": false, \"region\": \"string\", \"closestPingSite\": \"string\", \"country\": \"string\", \"matchmaking\": false }, \"players\": null, \"maps\": [ { \"map\": \"string\", \"mode\": \"string\", \"rounds\": 0, \"index\": 0 } ], \"vars\": \"_UNKNOWN_\", \"mapInfo\": { \"index\": 0, \"next\": 0 } } ] \"\"\" POST /api/instances creates a new rcon instance and tries to connect to it Required Scopes: INSTANCE#CREATE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"test?\" : false , \"host\" : \"string\" , \"port\" : 0 , \"password\" : \"string\" } }) //created instance console . log ( await response . json ()) /* { \"id\": 0, \"host\": \"string\", \"port\": 0, \"name\": \"string\", \"version\": \"BF3|VU\", \"state\": 0, \"serverinfo\": { \"name\": \"string\", \"slots\": 0, \"totalSlots\": 0, \"mode\": \"string\", \"map\": \"string\", \"roundsPlayed\": 0, \"roundsTotal\": 0, \"scores\": [ 0 ], \"targetScore\": 0, \"onlineState\": \"string\", \"ranked\": false, \"punkBuster\": false, \"password\": false, \"uptime\": 0, \"roundTime\": 0, \"address\": \"string\", \"punkBusterVersion\": \"string\", \"joinQueueEnabled\": false, \"region\": \"string\", \"closestPingSite\": \"string\", \"country\": \"string\", \"matchmaking\": false }, \"players\": null, \"maps\": [ { \"map\": \"string\", \"mode\": \"string\", \"rounds\": 0, \"index\": 0 } ], \"vars\": \"_UNKNOWN_\", \"mapInfo\": { \"index\": 0, \"next\": 0 } } */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/instances\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"test?\" : false , \"host\" : \"string\" , \"port\" : 0 , \"password\" : \"string\" } ) #created instance print ( r . json ()) \"\"\" { \"id\": 0, \"host\": \"string\", \"port\": 0, \"name\": \"string\", \"version\": \"BF3|VU\", \"state\": 0, \"serverinfo\": { \"name\": \"string\", \"slots\": 0, \"totalSlots\": 0, \"mode\": \"string\", \"map\": \"string\", \"roundsPlayed\": 0, \"roundsTotal\": 0, \"scores\": [ 0 ], \"targetScore\": 0, \"onlineState\": \"string\", \"ranked\": false, \"punkBuster\": false, \"password\": false, \"uptime\": 0, \"roundTime\": 0, \"address\": \"string\", \"punkBusterVersion\": \"string\", \"joinQueueEnabled\": false, \"region\": \"string\", \"closestPingSite\": \"string\", \"country\": \"string\", \"matchmaking\": false }, \"players\": null, \"maps\": [ { \"map\": \"string\", \"mode\": \"string\", \"rounds\": 0, \"index\": 0 } ], \"vars\": \"_UNKNOWN_\", \"mapInfo\": { \"index\": 0, \"next\": 0 } } \"\"\"","title":"/instance"},{"location":"api/instance/bans/","text":"GET /api/instances/{instanceId}/bans retrieves the banlist for this instance Required Scopes: BAN#ACCESS JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/bans\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) //ban for this instance console . log ( await response . json ()) /* [ { \"subset\": [ \"string\" ], \"timeout\": [ \"_UNKNOWN_\" ], \"reason\": \"string\" } ] */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/instances/ {instanceId} /bans\" , headers = { Authorization : \"Bearer %s \" % token } ) #ban for this instance print ( r . json ()) \"\"\" [ { \"subset\": [ \"string\" ], \"timeout\": [ \"_UNKNOWN_\" ], \"reason\": \"string\" } ] \"\"\" POST /api/instances/{instanceId}/bans creates a new ban Required Scopes: BAN#CREATE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/bans\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"subset\" : \"guid|name|ip\" , \"reason\" : \"string\" , \"durationType\" : \"rounds|seconds|perm\" , \"duration\" : 0 } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/instances/ {instanceId} /bans\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"subset\" : \"guid|name|ip\" , \"reason\" : \"string\" , \"durationType\" : \"rounds|seconds|perm\" , \"duration\" : 0 } ) DELETE /api/instances/{instanceId}/bans/{subset}/{id} delete a ban from this instance Required Scopes: BAN#DELETE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/bans/{subset}/{id}\" , { method : \"DELETE\" , headers : { Authorization : `Bearer ${ token } ` } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . delete ( url = \"/api/instances/ {instanceId} /bans/ {subset} / {id} \" , headers = { Authorization : \"Bearer %s \" % token } )","title":"/instance/:instanceId/bans"},{"location":"api/instance/events/","text":"GET /api/instances/{instanceId}/events/kill retrieves a certain amount of kills from a specific date Required Scopes: EVENT#KILL JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/events/kill\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) console . log ( await response . json ()) /* [ { \"id\": 0, \"instance\": 0, \"weapon\": \"string\", \"headshot\": false, \"created\": \"string\", \"killer?\": { \"name\": \"string\", \"guid\": \"string\" }, \"killed\": { \"name\": \"string\", \"guid\": \"string\" } } ] */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/instances/ {instanceId} /events/kill\" , headers = { Authorization : \"Bearer %s \" % token } ) print ( r . json ()) \"\"\" [ { \"id\": 0, \"instance\": 0, \"weapon\": \"string\", \"headshot\": false, \"created\": \"string\", \"killer?\": { \"name\": \"string\", \"guid\": \"string\" }, \"killed\": { \"name\": \"string\", \"guid\": \"string\" } } ] \"\"\" GET /api/instances/{instanceId}/events/chat retrieves a certain amount of chat messages from a specific date Required Scopes: EVENT#CHAT JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/events/chat\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) console . log ( await response . json ()) /* [ { \"id\": 0, \"instance\": 0, \"name\": \"string\", \"message\": \"string\", \"subset\": \"string\", \"created\": \"string\", \"player?\": { \"name\": \"string\", \"guid\": \"string\" } } ] */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/instances/ {instanceId} /events/chat\" , headers = { Authorization : \"Bearer %s \" % token } ) print ( r . json ()) \"\"\" [ { \"id\": 0, \"instance\": 0, \"name\": \"string\", \"message\": \"string\", \"subset\": \"string\", \"created\": \"string\", \"player?\": { \"name\": \"string\", \"guid\": \"string\" } } ] \"\"\"","title":"/instance/:instanceId/events"},{"location":"api/instance/instance/","text":"GET /api/instance/{instanceId} retrieves informations about a single instance Required Scopes: INSTANCE#ACCESS JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instance/{instanceId}\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) //single instance information console . log ( await response . json ()) /* { \"id\": 0, \"host\": \"string\", \"port\": 0, \"name\": \"string\", \"version\": \"BF3|VU\", \"state\": 0, \"serverinfo\": { \"name\": \"string\", \"slots\": 0, \"totalSlots\": 0, \"mode\": \"string\", \"map\": \"string\", \"roundsPlayed\": 0, \"roundsTotal\": 0, \"scores\": [ 0 ], \"targetScore\": 0, \"onlineState\": \"string\", \"ranked\": false, \"punkBuster\": false, \"password\": false, \"uptime\": 0, \"roundTime\": 0, \"address\": \"string\", \"punkBusterVersion\": \"string\", \"joinQueueEnabled\": false, \"region\": \"string\", \"closestPingSite\": \"string\", \"country\": \"string\", \"matchmaking\": false }, \"players\": null, \"maps\": [ { \"map\": \"string\", \"mode\": \"string\", \"rounds\": 0, \"index\": 0 } ], \"vars\": \"_UNKNOWN_\", \"mapInfo\": { \"index\": 0, \"next\": 0 } } */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/instance/ {instanceId} \" , headers = { Authorization : \"Bearer %s \" % token } ) #single instance information print ( r . json ()) \"\"\" { \"id\": 0, \"host\": \"string\", \"port\": 0, \"name\": \"string\", \"version\": \"BF3|VU\", \"state\": 0, \"serverinfo\": { \"name\": \"string\", \"slots\": 0, \"totalSlots\": 0, \"mode\": \"string\", \"map\": \"string\", \"roundsPlayed\": 0, \"roundsTotal\": 0, \"scores\": [ 0 ], \"targetScore\": 0, \"onlineState\": \"string\", \"ranked\": false, \"punkBuster\": false, \"password\": false, \"uptime\": 0, \"roundTime\": 0, \"address\": \"string\", \"punkBusterVersion\": \"string\", \"joinQueueEnabled\": false, \"region\": \"string\", \"closestPingSite\": \"string\", \"country\": \"string\", \"matchmaking\": false }, \"players\": null, \"maps\": [ { \"map\": \"string\", \"mode\": \"string\", \"rounds\": 0, \"index\": 0 } ], \"vars\": \"_UNKNOWN_\", \"mapInfo\": { \"index\": 0, \"next\": 0 } } \"\"\" PATCH /api/instance/{instanceId} modifies connection details to the battlefield server Required Scopes: INSTANCE#UPDATE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instance/{instanceId}\" , { method : \"PATCH\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"host\" : \"string\" , \"port\" : \"number\" , \"password\" : \"string\" } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . patch ( url = \"/api/instance/ {instanceId} \" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"host\" : \"string\" , \"port\" : \"number\" , \"password\" : \"string\" } ) DELETE /api/instance/{instanceId} removes an instance Required Scopes: INSTANCE#DELETE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instance/{instanceId}\" , { method : \"DELETE\" , headers : { Authorization : `Bearer ${ token } ` } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . delete ( url = \"/api/instance/ {instanceId} \" , headers = { Authorization : \"Bearer %s \" % token } ) PATCH /api/instance/{instanceId}/start connect the instance to the battlefield server Required Scopes: INSTANCE#UPDATE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instance/{instanceId}/start\" , { method : \"PATCH\" , headers : { Authorization : `Bearer ${ token } ` } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . patch ( url = \"/api/instance/ {instanceId} /start\" , headers = { Authorization : \"Bearer %s \" % token } ) PATCH /api/instance/{instanceId}/stop disconnect the instance from the battlefield server Required Scopes: INSTANCE#UPDATE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instance/{instanceId}/stop\" , { method : \"PATCH\" , headers : { Authorization : `Bearer ${ token } ` } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . patch ( url = \"/api/instance/ {instanceId} /stop\" , headers = { Authorization : \"Bearer %s \" % token } ) POST /api/instance/{instanceId}/message sends a message to the server Required Scopes: PLAYER#MESSAGE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instance/{instanceId}/message\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"message\" : \"string\" , \"subset\" : \"player\" , \"subsetId\" : \"string\" , \"yell\" : true , \"yellDuration\" : 0 } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/instance/ {instanceId} /message\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"message\" : \"string\" , \"subset\" : \"player\" , \"subsetId\" : \"string\" , \"yell\" : true , \"yellDuration\" : 0 } ) PATCH /api/instance/{instanceId}/ticketcount sets the tickets a team should have Required Scopes: PLAYER#TICKETS JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instance/{instanceId}/ticketcount\" , { method : \"PATCH\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"team\" : 0 , \"count\" : 0 } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . patch ( url = \"/api/instance/ {instanceId} /ticketcount\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"team\" : 0 , \"count\" : 0 } ) POST /api/instance/{instanceId}/raw sends a raw command to the instance Required Scopes: INSTANCE#CONSOLE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instance/{instanceId}/raw\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"words\" : [ \"string\" ] } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/instance/ {instanceId} /raw\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"words\" : [ \"string\" ] } )","title":"/instance/:instanceId"},{"location":"api/instance/logs/","text":"GET /api/instances/{instanceId}/logs/instance retrieves a list of log messages for the specified instance Required Scopes: INSTANCE#LOG JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/logs/instance\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) console . log ( await response . json ()) /* [ { \"instanceId\": 0, \"message\": \"string\", \"level\": \"string\", \"source\": 0, \"sourceLocation?\": 0, \"created\": \"string\" } ] */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/instances/ {instanceId} /logs/instance\" , headers = { Authorization : \"Bearer %s \" % token } ) print ( r . json ()) \"\"\" [ { \"instanceId\": 0, \"message\": \"string\", \"level\": \"string\", \"source\": 0, \"sourceLocation?\": 0, \"created\": \"string\" } ] \"\"\" GET /api/instances/{instanceId}/logs/plugins/ retrieves a list of plugin log messages Required Scopes: INSTANCE#LOG JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/logs/plugins/\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) console . log ( await response . json ()) /* [ { \"instanceId\": 0, \"message\": \"string\", \"level\": \"string\", \"source\": 0, \"sourceLocation?\": 0, \"created\": \"string\" } ] */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/instances/ {instanceId} /logs/plugins/\" , headers = { Authorization : \"Bearer %s \" % token } ) print ( r . json ()) \"\"\" [ { \"instanceId\": 0, \"message\": \"string\", \"level\": \"string\", \"source\": 0, \"sourceLocation?\": 0, \"created\": \"string\" } ] \"\"\" GET /api/instances/{instanceId}/logs/plugins/{pluginName} retrieves a list of plugin log messages for a specific plugin Required Scopes: INSTANCE#LOG JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/logs/plugins/{pluginName}\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) console . log ( await response . json ()) /* [ { \"instanceId\": 0, \"message\": \"string\", \"level\": \"string\", \"source\": 0, \"sourceLocation?\": 0, \"created\": \"string\" } ] */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/instances/ {instanceId} /logs/plugins/ {pluginName} \" , headers = { Authorization : \"Bearer %s \" % token } ) print ( r . json ()) \"\"\" [ { \"instanceId\": 0, \"message\": \"string\", \"level\": \"string\", \"source\": 0, \"sourceLocation?\": 0, \"created\": \"string\" } ] \"\"\"","title":"/instance/:instanceId/logs"},{"location":"api/instance/maps/","text":"GET /api/instances/{instanceId}/maps retrieves the current map rotation Required Scopes: INSTANCE#ACCESS JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/maps\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) console . log ( await response . json ()) /* [ { \"map\": \"string\", \"mode\": \"string\", \"rounds\": 0, \"index\": 0 } ] */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/instances/ {instanceId} /maps\" , headers = { Authorization : \"Bearer %s \" % token } ) print ( r . json ()) \"\"\" [ { \"map\": \"string\", \"mode\": \"string\", \"rounds\": 0, \"index\": 0 } ] \"\"\" POST /api/instances/{instanceId}/maps adds a map to the rotation Required Scopes: MAPS#MANAGE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/maps\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` } }) console . log ( await response . json ()) /* { \"map\": \"string\", \"mode\": \"string\", \"rounds\": \"_UNKNOWN_\", \"index?\": \"_UNKNOWN_\" } */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/instances/ {instanceId} /maps\" , headers = { Authorization : \"Bearer %s \" % token } ) print ( r . json ()) \"\"\" { \"map\": \"string\", \"mode\": \"string\", \"rounds\": \"_UNKNOWN_\", \"index?\": \"_UNKNOWN_\" } \"\"\" GET /api/instances/{instanceId}/maps/current retrieves the current and next map index Required Scopes: INSTANCE#ACCESS JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/maps/current\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/instances/ {instanceId} /maps/current\" , headers = { Authorization : \"Bearer %s \" % token } ) POST /api/instances/{instanceId}/maps/endRound ends the current round with a set winning team Required Scopes: MAPS#SWITCH JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/maps/endRound\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"winner\" : 0 } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/instances/ {instanceId} /maps/endRound\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"winner\" : 0 } ) POST /api/instances/{instanceId}/maps/nextRound starts the next round Required Scopes: MAPS#SWITCH JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/maps/nextRound\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/instances/ {instanceId} /maps/nextRound\" , headers = { Authorization : \"Bearer %s \" % token } ) POST /api/instances/{instanceId}/maps/restartRound restarts the current round Required Scopes: MAPS#SWITCH JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/maps/restartRound\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/instances/ {instanceId} /maps/restartRound\" , headers = { Authorization : \"Bearer %s \" % token } ) GET /api/instances/{instanceId}/maps/{index} retrieves the map data from the current index Required Scopes: INSTANCE#ACCESS JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/maps/{index}\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) console . log ( await response . json ()) /* { \"map\": \"string\", \"mode\": \"string\", \"rounds\": 0, \"index\": 0 } */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/instances/ {instanceId} /maps/ {index} \" , headers = { Authorization : \"Bearer %s \" % token } ) print ( r . json ()) \"\"\" { \"map\": \"string\", \"mode\": \"string\", \"rounds\": 0, \"index\": 0 } \"\"\" DELETE /api/instances/{instanceId}/maps/{index} removes the map from the current rotation Required Scopes: MAPS#MANAGE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/maps/{index}\" , { method : \"DELETE\" , headers : { Authorization : `Bearer ${ token } ` } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . delete ( url = \"/api/instances/ {instanceId} /maps/ {index} \" , headers = { Authorization : \"Bearer %s \" % token } ) POST /api/instances/{instanceId}/maps/{index}/next sets the index of the next map to be played Required Scopes: MAPS#SWITCH JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/maps/{index}/next\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/instances/ {instanceId} /maps/ {index} /next\" , headers = { Authorization : \"Bearer %s \" % token } ) PATCH /api/instances/{instanceId}/maps/{index}/position/{toIndex} moves the map to another index Required Scopes: MAPS#MANAGE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/maps/{index}/position/{toIndex}\" , { method : \"PATCH\" , headers : { Authorization : `Bearer ${ token } ` } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . patch ( url = \"/api/instances/ {instanceId} /maps/ {index} /position/ {toIndex} \" , headers = { Authorization : \"Bearer %s \" % token } )","title":"/instance/:instanceId/maps"},{"location":"api/instance/mods/","text":"GET /api/instances/{instanceId}/mods retrieves a list of available mods Required Scopes: MOD#ACCESS JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/mods\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) console . log ( await response . json ()) /* [ \"_UNKNOWN_\" ] */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/instances/ {instanceId} /mods\" , headers = { Authorization : \"Bearer %s \" % token } ) print ( r . json ()) \"\"\" [ \"_UNKNOWN_\" ] \"\"\" PATCH /api/instances/{instanceId}/mods/reload reloads all extensions Required Scopes: MOD#UPDATE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/mods/reload\" , { method : \"PATCH\" , headers : { Authorization : `Bearer ${ token } ` } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . patch ( url = \"/api/instances/ {instanceId} /mods/reload\" , headers = { Authorization : \"Bearer %s \" % token } ) PATCH /api/instances/{instanceId}/mods/clear clears the modlist Required Scopes: MOD#DELETE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/mods/clear\" , { method : \"PATCH\" , headers : { Authorization : `Bearer ${ token } ` } }) console . log ( await response . json ()) /* [ \"_UNKNOWN_\" ] */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . patch ( url = \"/api/instances/ {instanceId} /mods/clear\" , headers = { Authorization : \"Bearer %s \" % token } ) print ( r . json ()) \"\"\" [ \"_UNKNOWN_\" ] \"\"\" POST /api/instances/{instanceId}/mods/{mod} enables a mod Required Scopes: MOD#CREATE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/mods/{mod}\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/instances/ {instanceId} /mods/ {mod} \" , headers = { Authorization : \"Bearer %s \" % token } ) DELETE /api/instances/{instanceId}/mods/{mod} disables a mod Required Scopes: MOD#DELETE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/mods/{mod}\" , { method : \"DELETE\" , headers : { Authorization : `Bearer ${ token } ` } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . delete ( url = \"/api/instances/ {instanceId} /mods/ {mod} \" , headers = { Authorization : \"Bearer %s \" % token } )","title":"/instance/:instanceId/mods"},{"location":"api/instance/players/","text":"GET /api/instances/{instanceId}/players retrieves a list of currently ingame players Required Scopes: INSTANCE#ACCESS JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/players\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/instances/ {instanceId} /players\" , headers = { Authorization : \"Bearer %s \" % token } ) GET /api/instances/{instanceId}/players/{guid} retrieves informations about a single player online Required Scopes: INSTANCEUSER#ACCESS JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/players/{guid}\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) //list of users on this instance console . log ( await response . json ()) /* { \"name\": \"string\", \"guid\": \"string\", \"playerGuid\": \"_UNKNOWN_\", \"teamId\": 0, \"squadId\": 0, \"kills\": 0, \"deaths\": 0, \"score\": \"string\", \"rank\": \"string\", \"ping\": 0, \"spectator\": 0, \"ip\": \"string\" } */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/instances/ {instanceId} /players/ {guid} \" , headers = { Authorization : \"Bearer %s \" % token } ) #list of users on this instance print ( r . json ()) \"\"\" { \"name\": \"string\", \"guid\": \"string\", \"playerGuid\": \"_UNKNOWN_\", \"teamId\": 0, \"squadId\": 0, \"kills\": 0, \"deaths\": 0, \"score\": \"string\", \"rank\": \"string\", \"ping\": 0, \"spectator\": 0, \"ip\": \"string\" } \"\"\" POST /api/instances/{instanceId}/players/{guid}/move moves a player to another squad/team Required Scopes: PLAYER#MOVE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/players/{guid}/move\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"teamId\" : 0 , \"squadId\" : 0 , \"kill\" : true } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/instances/ {instanceId} /players/ {guid} /move\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"teamId\" : 0 , \"squadId\" : 0 , \"kill\" : true } ) POST /api/instances/{instanceId}/players/{guid}/message sends a message to the player/team/squad Required Scopes: PLAYER#MESSAGE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/players/{guid}/message\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"subset\" : \"squad|team|player\" , \"message\" : \"string\" , \"yell?\" : \"boolean\" , \"yellDuration?\" : \"number\" } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/instances/ {instanceId} /players/ {guid} /message\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"subset\" : \"squad|team|player\" , \"message\" : \"string\" , \"yell?\" : \"boolean\" , \"yellDuration?\" : \"number\" } ) POST /api/instances/{instanceId}/players/{guid}/kill kills the player with optional reason message Required Scopes: PLAYER#KILL JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/players/{guid}/kill\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"reason\" : \"string\" } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/instances/ {instanceId} /players/ {guid} /kill\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"reason\" : \"string\" } ) POST /api/instances/{instanceId}/players/{guid}/kick kicks the player with optional reason message Required Scopes: PLAYER#KICK JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/players/{guid}/kick\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"reason\" : \"string\" } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/instances/ {instanceId} /players/ {guid} /kick\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"reason\" : \"string\" } ) POST /api/instances/{instanceId}/players/{guid}/ban bans the player Required Scopes: PLAYER#BAN JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/players/{guid}/ban\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"subset\" : \"guid|name|ip\" , \"reason\" : \"string\" , \"durationType\" : \"rounds|seconds|perm\" , \"duration\" : 0 } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/instances/ {instanceId} /players/ {guid} /ban\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"subset\" : \"guid|name|ip\" , \"reason\" : \"string\" , \"durationType\" : \"rounds|seconds|perm\" , \"duration\" : 0 } )","title":"/instance/:instanceId/players"},{"location":"api/instance/plugins/","text":"GET /api/instances/{instanceId}/plugins retrieves a list of plugins which are startable on this instance Required Scopes: PLUGIN#ACCESS JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/plugins\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) console . log ( await response . json ()) /* [ { \"id\": 0, \"storeVersion\": \"string\", \"uuid\": \"string\", \"store?\": \"string\", \"name\": \"string\", \"state\": 0, \"meta\": { \"name\": \"string\", \"description\": \"string\", \"version\": \"string\", \"author\": \"string\", \"backend\": \"string\", \"entry\": \"string\", \"dependency?\": [ \"string\" ], \"vars\": [ { \"name\": \"string\", \"description\": \"string\", \"type\": \"string|number|boolean|strings|select|array\", \"multiline?\": false, \"default\": \"any\", \"options\": [ null ], \"conditions\": [ null ] } ] }, \"config\": {} } ] */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/instances/ {instanceId} /plugins\" , headers = { Authorization : \"Bearer %s \" % token } ) print ( r . json ()) \"\"\" [ { \"id\": 0, \"storeVersion\": \"string\", \"uuid\": \"string\", \"store?\": \"string\", \"name\": \"string\", \"state\": 0, \"meta\": { \"name\": \"string\", \"description\": \"string\", \"version\": \"string\", \"author\": \"string\", \"backend\": \"string\", \"entry\": \"string\", \"dependency?\": [ \"string\" ], \"vars\": [ { \"name\": \"string\", \"description\": \"string\", \"type\": \"string|number|boolean|strings|select|array\", \"multiline?\": false, \"default\": \"any\", \"options\": [ null ], \"conditions\": [ null ] } ] }, \"config\": {} } ] \"\"\" POST /api/instances/{instanceId}/plugins/{id}/start enables the plugin Required Scopes: PLUGIN#MODIFY JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/plugins/{id}/start\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/instances/ {instanceId} /plugins/ {id} /start\" , headers = { Authorization : \"Bearer %s \" % token } ) POST /api/instances/{instanceId}/plugins/{id}/stop disables the plugin Required Scopes: PLUGIN#MODIFY JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/plugins/{id}/stop\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/instances/ {instanceId} /plugins/ {id} /stop\" , headers = { Authorization : \"Bearer %s \" % token } ) PATCH /api/instances/{instanceId}/plugins/{id}/config modifies the configuration of the plugin Required Scopes: PLUGIN#MODIFY JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/plugins/{id}/config\" , { method : \"PATCH\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"vars.key\" : \"any\" } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . patch ( url = \"/api/instances/ {instanceId} /plugins/ {id} /config\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"vars.key\" : \"any\" } ) DELETE /api/instances/{instanceId}/plugins/{id} removes a plugin from the instance Required Scopes: PLUGIN#REMOVE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/plugins/{id}\" , { method : \"DELETE\" , headers : { Authorization : `Bearer ${ token } ` } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . delete ( url = \"/api/instances/ {instanceId} /plugins/ {id} \" , headers = { Authorization : \"Bearer %s \" % token } ) GET /api/instances/{instanceId}/plugins/store retrieves a list of plugins which can be downloaded from the store Required Scopes: PLUGIN#ACCESS JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/plugins/store\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) console . log ( await response . json ()) /* [ { \"name\": \"string\", \"description\": \"string\", \"version\": \"string\", \"author\": \"string\", \"type\": \"string\", \"uuid\": \"string\" } ] */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/instances/ {instanceId} /plugins/store\" , headers = { Authorization : \"Bearer %s \" % token } ) print ( r . json ()) \"\"\" [ { \"name\": \"string\", \"description\": \"string\", \"version\": \"string\", \"author\": \"string\", \"type\": \"string\", \"uuid\": \"string\" } ] \"\"\" POST /api/instances/{instanceId}/plugins/store/{uuid} downloads a plugin to the instance plugin folder, this route can also be used to update a plugin Required Scopes: PLUGIN#CREATE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/plugins/store/{uuid}\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/instances/ {instanceId} /plugins/store/ {uuid} \" , headers = { Authorization : \"Bearer %s \" % token } )","title":"/instance/:instanceId/plugins"},{"location":"api/instance/reservedslot/","text":"GET /api/instances/{instanceId}/reservedslot retrieves a list of vip slots Required Scopes: RESERVEDSLOT#ACCESS JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/reservedslot\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) console . log ( await response . json ()) /* [ \"string\" ] */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/instances/ {instanceId} /reservedslot\" , headers = { Authorization : \"Bearer %s \" % token } ) print ( r . json ()) \"\"\" [ \"string\" ] \"\"\" POST /api/instances/{instanceId}/reservedslot adds a map to the rotation Required Scopes: RESERVEDSLOT#CREATE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/reservedslot\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"name\" : \"string\" } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/instances/ {instanceId} /reservedslot\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"name\" : \"string\" } ) DELETE /api/instances/{instanceId}/reservedslot/{slot} deletes a vip slot Required Scopes: RESERVEDSLOT#DELETE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/reservedslot/{slot}\" , { method : \"DELETE\" , headers : { Authorization : `Bearer ${ token } ` } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . delete ( url = \"/api/instances/ {instanceId} /reservedslot/ {slot} \" , headers = { Authorization : \"Bearer %s \" % token } )","title":"/instance/:instanceId/reservedslot"},{"location":"api/instance/users/","text":"GET /api/instances/{instanceId}/users retrieves a list of users with their permissions Required Scopes: INSTANCEUSER#ACCESS JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/users\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) //list of users on this instance console . log ( await response . json ()) /* [ { \"permId\": 0, \"userId\": 0, \"modified\": \"string\", \"created\": \"string\", \"username\": \"string\", \"scopes\": [ \"_UNKNOWN_\" ] } ] */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/instances/ {instanceId} /users\" , headers = { Authorization : \"Bearer %s \" % token } ) #list of users on this instance print ( r . json ()) \"\"\" [ { \"permId\": 0, \"userId\": 0, \"modified\": \"string\", \"created\": \"string\", \"username\": \"string\", \"scopes\": [ \"_UNKNOWN_\" ] } ] \"\"\" GET /api/instances/{instanceId}/users/invite retrieves a list of invite links for this instance Required Scopes: INSTANCEUSER#ACCESS JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/users/invite\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) //list of users on this instance console . log ( await response . json ()) /* [ { \"id\": 0, \"created\": \"string\", \"modified\": \"string\", \"token\": \"string\", \"issuer\": { \"id\": 0, \"username\": \"string\" }, \"user\": { \"id\": 0, \"username\": \"string\" }, \"instanceId\": 0 } ] */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/instances/ {instanceId} /users/invite\" , headers = { Authorization : \"Bearer %s \" % token } ) #list of users on this instance print ( r . json ()) \"\"\" [ { \"id\": 0, \"created\": \"string\", \"modified\": \"string\", \"token\": \"string\", \"issuer\": { \"id\": 0, \"username\": \"string\" }, \"user\": { \"id\": 0, \"username\": \"string\" }, \"instanceId\": 0 } ] \"\"\" POST /api/instances/{instanceId}/users/invite creates a new invite token for this instance Required Scopes: INSTANCEUSER#CREATE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/users/invite\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"scopes\" : [ \"INSTANCE#ACCESS\" , \"INSTANCE#UPDATE\" ] } }) //retrieves the invite token for this instance console . log ( await response . json ()) /* { \"token\": \"string\" } */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/instances/ {instanceId} /users/invite\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"scopes\" : [ \"INSTANCE#ACCESS\" , \"INSTANCE#UPDATE\" ] } ) #retrieves the invite token for this instance print ( r . json ()) \"\"\" { \"token\": \"string\" } \"\"\" GET /api/instances/{instanceId}/users/{userId} retrieves a single user with their permissions Required Scopes: INSTANCEUSER#ACCESS JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/users/{userId}\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) //user informations console . log ( await response . json ()) /* { \"permId\": 0, \"userId\": 0, \"modified\": \"string\", \"created\": \"string\", \"username\": \"string\", \"scopes\": [ \"_UNKNOWN_\" ] } */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/instances/ {instanceId} /users/ {userId} \" , headers = { Authorization : \"Bearer %s \" % token } ) #user informations print ( r . json ()) \"\"\" { \"permId\": 0, \"userId\": 0, \"modified\": \"string\", \"created\": \"string\", \"username\": \"string\", \"scopes\": [ \"_UNKNOWN_\" ] } \"\"\" DELETE /api/instances/{instanceId}/users/{userId} revokes access for a user to the instance Required Scopes: INSTANCEUSER#REMOVE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/users/{userId}\" , { method : \"DELETE\" , headers : { Authorization : `Bearer ${ token } ` } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . delete ( url = \"/api/instances/ {instanceId} /users/ {userId} \" , headers = { Authorization : \"Bearer %s \" % token } ) PATCH /api/instances/{instanceId}/users/{userId}/permissions updates permissions from a user for this instance Required Scopes: INSTANCEUSER#UPDATE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/users/{userId}/permissions\" , { method : \"PATCH\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"scopes\" : [ \"SCOPES\" ] } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . patch ( url = \"/api/instances/ {instanceId} /users/ {userId} /permissions\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"scopes\" : [ \"SCOPES\" ] } )","title":"/instance/:instanceId/users"},{"location":"api/instance/vars/","text":"GET /api/instances/{instanceId}/vars retrieves a list of vip slots Required Scopes: INSTANCE#ACCESS JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/vars\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) console . log ( await response . json ()) /* \"_UNKNOWN_\" */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/instances/ {instanceId} /vars\" , headers = { Authorization : \"Bearer %s \" % token } ) print ( r . json ()) \"\"\" \"_UNKNOWN_\" \"\"\" PATCH /api/instances/{instanceId}/vars updates variables in this instance Required Scopes: VARIABLE#MODIFY For more informations see here JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/vars\" , { method : \"PATCH\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"[variablename]\" : \"string|number|boolean\" } }) console . log ( await response . json ()) /* \"_UNKNOWN_\" */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . patch ( url = \"/api/instances/ {instanceId} /vars\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"[variablename]\" : \"string|number|boolean\" } ) print ( r . json ()) \"\"\" \"_UNKNOWN_\" \"\"\" GET /api/instances/{instanceId}/vars/options retrieves all var getters and setters for this instance Required Scopes: INSTANCE#ACCESS JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/instances/{instanceId}/vars/options\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) console . log ( await response . json ()) /* { \"getters\": [ \"string\" ], \"setters\": [ \"string\" ] } */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/instances/ {instanceId} /vars/options\" , headers = { Authorization : \"Bearer %s \" % token } ) print ( r . json ()) \"\"\" { \"getters\": [ \"string\" ], \"setters\": [ \"string\" ] } \"\"\"","title":"/instance/:instanceId/vars"},{"location":"api/repository/","text":"GET /api/repository gets a list of created repositories Required Scopes: REPOSITORY#ACCESS JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/repository\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) //responds with all available repositores console . log ( await response . json ()) /* [ { \"type\": \"DEV|GITHUB\", \"id\": 0, \"created\": \"string\", \"modified\": \"string\", \"options\": {}, \"plugins\": [ { \"name\": \"string\", \"description\": \"string\", \"version\": \"string\", \"author\": \"string\", \"uuid\": \"string\" } ] } ] */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/repository\" , headers = { Authorization : \"Bearer %s \" % token } ) #responds with all available repositores print ( r . json ()) \"\"\" [ { \"type\": \"DEV|GITHUB\", \"id\": 0, \"created\": \"string\", \"modified\": \"string\", \"options\": {}, \"plugins\": [ { \"name\": \"string\", \"description\": \"string\", \"version\": \"string\", \"author\": \"string\", \"uuid\": \"string\" } ] } ] \"\"\" POST /api/repository adds a new repository Required Scopes: REPOSITORY#CREATE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/repository\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"url\" : \"string\" , \"branch?\" : \"string\" , \"headers?\" : \"string\" } }) console . log ( await response . json ()) /* { \"type\": \"DEV|GITHUB\", \"id\": 0, \"created\": \"string\", \"modified\": \"string\", \"options\": {}, \"plugins\": [ { \"name\": \"string\", \"description\": \"string\", \"version\": \"string\", \"author\": \"string\", \"uuid\": \"string\" } ] } */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/repository\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"url\" : \"string\" , \"branch?\" : \"string\" , \"headers?\" : \"string\" } ) print ( r . json ()) \"\"\" { \"type\": \"DEV|GITHUB\", \"id\": 0, \"created\": \"string\", \"modified\": \"string\", \"options\": {}, \"plugins\": [ { \"name\": \"string\", \"description\": \"string\", \"version\": \"string\", \"author\": \"string\", \"uuid\": \"string\" } ] } \"\"\"","title":"/repository"},{"location":"api/repository/repository/","text":"GET /api/repository/{id} gets a repository with the specified id Required Scopes: REPOSITORY#ACCESS JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/repository/{id}\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) console . log ( await response . json ()) /* { \"type\": \"DEV|GITHUB\", \"id\": 0, \"created\": \"string\", \"modified\": \"string\", \"options\": {}, \"plugins\": [ { \"name\": \"string\", \"description\": \"string\", \"version\": \"string\", \"author\": \"string\", \"uuid\": \"string\" } ] } */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/repository/ {id} \" , headers = { Authorization : \"Bearer %s \" % token } ) print ( r . json ()) \"\"\" { \"type\": \"DEV|GITHUB\", \"id\": 0, \"created\": \"string\", \"modified\": \"string\", \"options\": {}, \"plugins\": [ { \"name\": \"string\", \"description\": \"string\", \"version\": \"string\", \"author\": \"string\", \"uuid\": \"string\" } ] } \"\"\" DELETE /api/repository/{id} deletes the specified repository Required Scopes: REPOSITORY#REMOVE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/repository/{id}\" , { method : \"DELETE\" , headers : { Authorization : `Bearer ${ token } ` } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . delete ( url = \"/api/repository/ {id} \" , headers = { Authorization : \"Bearer %s \" % token } ) PATCH /api/repository adds a new repository Required Scopes: REPOSITORY#CREATE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/repository\" , { method : \"PATCH\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"url?\" : \"string\" , \"branch?\" : \"string\" , \"headers?\" : \"string\" , \"enabled?\" : true } }) console . log ( await response . json ()) /* { \"type\": \"DEV|GITHUB\", \"id\": 0, \"created\": \"string\", \"modified\": \"string\", \"options\": {}, \"plugins\": [ { \"name\": \"string\", \"description\": \"string\", \"version\": \"string\", \"author\": \"string\", \"uuid\": \"string\" } ] } */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . patch ( url = \"/api/repository\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"url?\" : \"string\" , \"branch?\" : \"string\" , \"headers?\" : \"string\" , \"enabled?\" : true } ) print ( r . json ()) \"\"\" { \"type\": \"DEV|GITHUB\", \"id\": 0, \"created\": \"string\", \"modified\": \"string\", \"options\": {}, \"plugins\": [ { \"name\": \"string\", \"description\": \"string\", \"version\": \"string\", \"author\": \"string\", \"uuid\": \"string\" } ] } \"\"\"","title":"/repository/:repositoryId"},{"location":"api/user/","text":"GET /api/users gets informations about all available users Required Scopes: USER#ACCESS JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/users\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) //responds with all users in the database console . log ( await response . json ()) /* [ { \"id\": 0, \"created\": \"string\", \"modified\": \"string\", \"username\": \"string\", \"email\": \"string\", \"permissions\": [ { \"id\": 0, \"root\": false, \"instanceId\": 0, \"scopes\": [ \"string\" ] } ] } ] */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/users\" , headers = { Authorization : \"Bearer %s \" % token } ) #responds with all users in the database print ( r . json ()) \"\"\" [ { \"id\": 0, \"created\": \"string\", \"modified\": \"string\", \"username\": \"string\", \"email\": \"string\", \"permissions\": [ { \"id\": 0, \"root\": false, \"instanceId\": 0, \"scopes\": [ \"string\" ] } ] } ] \"\"\" POST /api/users gets informations about all available users Required Scopes: USER#CREATE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/users\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"username\" : \"string\" , \"password\" : \"string\" } }) //responds with all users in the database console . log ( await response . json ()) /* { \"id\": 0, \"created\": \"string\", \"modified\": \"string\", \"username\": \"string\", \"email\": \"string\", \"permissions\": [ { \"id\": 0, \"root\": false, \"instanceId\": 0, \"scopes\": [ \"string\" ] } ] } */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/users\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"username\" : \"string\" , \"password\" : \"string\" } ) #responds with all users in the database print ( r . json ()) \"\"\" { \"id\": 0, \"created\": \"string\", \"modified\": \"string\", \"username\": \"string\", \"email\": \"string\", \"permissions\": [ { \"id\": 0, \"root\": false, \"instanceId\": 0, \"scopes\": [ \"string\" ] } ] } \"\"\"","title":"/users"},{"location":"api/user/user/","text":"GET /api/users/:id gets informations about a single user Required Scopes: USER#ACCESS JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/users/:id\" , { method : \"GET\" , headers : { Authorization : `Bearer ${ token } ` } }) //responds with all users in the database console . log ( await response . json ()) /* { \"id\": 0, \"created\": \"string\", \"modified\": \"string\", \"username\": \"string\", \"email\": \"string\", \"permissions\": [ { \"id\": 0, \"root\": false, \"instanceId\": 0, \"scopes\": [ \"string\" ] } ] } */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . get ( url = \"/api/users/:id\" , headers = { Authorization : \"Bearer %s \" % token } ) #responds with all users in the database print ( r . json ()) \"\"\" { \"id\": 0, \"created\": \"string\", \"modified\": \"string\", \"username\": \"string\", \"email\": \"string\", \"permissions\": [ { \"id\": 0, \"root\": false, \"instanceId\": 0, \"scopes\": [ \"string\" ] } ] } \"\"\" PATCH /api/users/:id modifies certain properties of a user Required Scopes: USER#MODIFY JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/users/:id\" , { method : \"PATCH\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"password?\" : \"string\" , \"email?\" : \"string|null\" } }) console . log ( await response . json ()) /* { \"id\": 0, \"created\": \"string\", \"modified\": \"string\", \"username\": \"string\", \"email\": \"string\", \"permissions\": [ { \"id\": 0, \"root\": false, \"instanceId\": 0, \"scopes\": [ \"string\" ] } ] } */ Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . patch ( url = \"/api/users/:id\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"password?\" : \"string\" , \"email?\" : \"string|null\" } ) print ( r . json ()) \"\"\" { \"id\": 0, \"created\": \"string\", \"modified\": \"string\", \"username\": \"string\", \"email\": \"string\", \"permissions\": [ { \"id\": 0, \"root\": false, \"instanceId\": 0, \"scopes\": [ \"string\" ] } ] } \"\"\" DELETE /api/users/:id removes a user Required Scopes: USER#DELETE JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/users/:id\" , { method : \"DELETE\" , headers : { Authorization : `Bearer ${ token } ` } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . delete ( url = \"/api/users/:id\" , headers = { Authorization : \"Bearer %s \" % token } ) POST /api/users/:id/permissions adds a new permission to this user Required Scopes: USER#MODIFY JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/users/:id/permissions\" , { method : \"POST\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"root?\" : \"boolean\" , \"instanceId?\" : 0 , \"scopes\" : [ \"PERMISSION#SCOPES\" ] } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . post ( url = \"/api/users/:id/permissions\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"root?\" : \"boolean\" , \"instanceId?\" : 0 , \"scopes\" : [ \"PERMISSION#SCOPES\" ] } ) DELETE /api/users/:id/permissions/:permissionId removes a permissionid from the user Required Scopes: USER#MODIFY JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/users/:id/permissions/:permissionId\" , { method : \"DELETE\" , headers : { Authorization : `Bearer ${ token } ` } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . delete ( url = \"/api/users/:id/permissions/:permissionId\" , headers = { Authorization : \"Bearer %s \" % token } ) PATCH /api/users/:id/permissions/:permissionId removes a permissionid from the user Required Scopes: USER#MODIFY JavaScript const fetch = require ( \"node-fetch\" ) const token = \"_YOUR_JWT_TOKEN_\" const response = await fetch ( \"/api/users/:id/permissions/:permissionId\" , { method : \"PATCH\" , headers : { Authorization : `Bearer ${ token } ` , Content - Type : \"application/json\" }, body : { \"scopes\" : [ \"PERMISSION#SCOPES\" ] } }) Python import requests token = \"_YOUR_JWT_TOKEN_\" r = requests . patch ( url = \"/api/users/:id/permissions/:permissionId\" , headers = { Authorization : \"Bearer %s \" % token , Content - Type : \"application/json\" } body : { \"scopes\" : [ \"PERMISSION#SCOPES\" ] } )","title":"/users/:userId"},{"location":"general/configuration/","text":"The base configuration for your current release can always be seen inside config.default.yaml . You should copy this file to config.yaml after installation config.yaml database : #this is a string and can either be \"sqlite\", \"mariadb\", \"postgres\" use : \"sqlite\" #see https://github.com/typeorm/typeorm/blob/master/docs/connection-options.md for details #depending on what database you are using you can choose between those 3 presets #for performance reasons sqlite is only recommended if you intend to run maximum of 5 instances sqlite : database : \"./rcon.db\" mariadb : host : \"127.0.0.1\" port : 3306 username : \"\" password : \"\" database : \"battlefield\" postgres : host : \"127.0.0.1\" port : 5432 username : \"\" password : \"\" database : \"\" logging : #enable logging of query messages normally not needed for end users orm : false #loglevel to use available options are \"verbose\"|\"info\"|\"warn\"|\"error\" #\"verbose\": debug mode, logs everything #\"info\": all informational messages and above #\"warn\": warning messages and above (which are not that bad) #\"error\": only critical errors will be logged level : info webserver : #port which the webserver listens to dont set any lower than 1024! listenport : 8000 #set this to true when application runs behind a proxy #this will tell the webserver to use the \"X-Forwarded-For\", \"X-Forwarded-Proto\", ... headers proxy : false #enable pretty json output for development purposes prettyJson : false jwt : #maxmimum token age in days maxAge : 7 #time in days after a new token gets issued sendRefresh : 5 #set cors when requests comes from one of those domains #can be helpful if you run the backend on a different domain than the frontend cors : - \"https://alliance-apps.github.io\" instance : #default time in ms of how many updates get sent to the rcon server #lower number means more messages will be sent to the battlefield/vu server and socket updates will be faster syncInterval : 5000 plugins : #location of the directory to read plugins from baseDir : \"./plugins\" #smtp settings in order to send forgot-password requests smtp : #enable this feature? enable : false #email address to send mails from senderAddress : \"foo@example.com\" #connection options, for more informations see https://nodemailer.com/smtp/ options : host : \"smpt.example.com\" port : 587 auth : user : \"\" pass : \"\" content : #you can use wildcards %username% and %password% for subject and text subject : \"Forgot Password request\" text : \"Hello %username%, your new password is %password%\"","title":"Configuration"},{"location":"general/faq/","text":"How do I reset my admin password? In order to reset your admin password start the application with npm start -- --override-password=YOUR_NEW_PASSWORD","title":"FAQ"},{"location":"general/installation/","text":"Prerequisites minimum NodeJS v14 installed npm installed Database Support Currently supported is: MariaDB PostgreSQL Sqlite (default) Installation In order to install VeniceRCON you will need to have NodeJS (version >= 12) and npm preinstalled on your server. It is recommended to use this tool with a process manager like (PM2)[https://pm2.keymetrics.io/] # download your release curl -OL https://github.com/alliance-apps/VeniceRCON/releases/latest/download/venicercon.tar.gz # unpack the files tar -xvf venicercon.tar.gz # switch into the downloaded folder cd venicercon # install dependencies via npm npm ci --only = prod # copy the default config.default.yaml to config.yaml # by default this config can be used as is # and does not require further editing cp config.default.yaml config.yaml #start the tool npm start Development If you want to make changes or use the current repository from github you can simply clone the repository from github: git clone https://github.com/alliance-apps/VeniceRCON-backend Then install the required dependencies from the package-lock.json with following command (this should also be done after every git pull ): npm ci Finally in order to be able to run it use: npm run start-dev This command will first build the JS files from the TypeScript files and after will start the VeniceRCON!","title":"Installation"},{"location":"general/proxy/","text":"NGINX for NGINX the recommended configuration would look like server { listen 443 ; server_name vurcon.example.com ; ssl on ; ssl_certificate /path/to/your/certfile/fullchain.pen ; ssl_certificate_key /path/to/your/certfile/privkey.pem ; location / { #set the correct ip + port to your application proxy_pass http://127.0.0.1:8000 ; proxy_set_header Host $host ; proxy_set_header X-Forwarded-For $remote_addr ; #set to http if no ssl is used #altough SSL is strongly recommended proxy_set_header X-Forwarded-Proto https proxy_set_header Upgrade $http_upgrade ; proxy_set_header Connection upgrade ; } }","title":"Proxy"},{"location":"general/advanced/scopes/","text":"Permission Scopes Permission Scopes are being saved as a bitmask, their validity can be for only a specific instance or globally. scope bit description INSTANCE#ACCESS 0x01 read access for an instance INSTANCE#CREATE 0x02 create an instance INSTANCE#UPDATE 0x04 modify an instance INSTANCE#DELETE 0x08 delete an instance INSTANCE#LOGS 0x08 allows access to server logs INSTANCE#CONSOLE 0x08 allows console events INSTANCEUSER#ACCESS 0x100 read access for an instance INSTANCEUSER#CREATE 0x200 create invite tokens for an instance INSTANCEUSER#UPDATE 0x400 update permissions from an instace INSTANCEUSER#REMOVE 0x800 remove users from an instance BAN#ACCESS 0x010000 view the current ban list BAN#CREATE 0x020000 create bans BAN#DELETE 0x040000 remove bans PLAYER#KILL 0x01000000 kill a player PLAYER#KICK 0x02000000 kick a player PLAYER#MESSAGE 0x04000000 messages a player PLAYER#MOVE 0x08000000 moves a player PLAYER#TICKETS 0x10000000 allows to set the team ticket counts MAP#SWITCH 0x0100000000 change map MAP#MANAGE 0x0200000000 delete or add new maps RESERVEDSLOT#ACCESS 0x010000000000 access the reserved slot list RESERVEDSLOT#CREATE 0x020000000000 adds someone to reserved slot list RESERVEDSLOT#DELETE 0x020000000000 deletes someone from the reserved slot list PLUGIN#ACCESS 0x01000000000000 access plugin informations PLUGIN#MODIFY 0x02000000000000 modify settings of plugins PLUGIN#CREATE 0x01000000000000 add a plugin PLUGIN#REMOVE 0x02000000000000 remove a plugin VARIABLE#MODIFY 0x0200000000000000 modify variables EVENT#CHAT 0x010000000000000000 access chat events EVENT#KILL 0x020000000000000000 access kill events MOD#ACCESS 0x0100000000000000000 access mod related data MOD#CREATE 0x0200000000000000000 add mods MOD#UPDATE 0x0400000000000000000 update mod related stuff MOD#DELETE 0x0800000000000000000 delete mods PLUGINREPOSITORY#ACCESS 0x010000000000000000000 access repository informations PLUGINREPOSITORY#MODIFY 0x020000000000000000000 modify a repository PLUGINREPOSITORY#CREATE 0x040000000000000000000 add a repository PLUGINREPOSITORY#REMOVE 0x080000000000000000000 delete a repository USER#ACCESS 0x01000000000000000000000 allows access to the administrative instance user managment USER#CREATE 0x02000000000000000000000 allows user creation USER#REMOVE 0x04000000000000000000000 deletes user USER#MODIFY 0x08000000000000000000000 modify email, password and permissions of users","title":"Permissions"},{"location":"general/advanced/variables/","text":"Permission Scopes Available Battlefield 3 Variables are: name renark type description serverName read&write string autoBalance read&write boolean friendlyFire read&write boolean maxPlayers read&write number serverDescription read&write string serverMessage read&write string killCam read&write boolean miniMap read&write boolean hud read&write boolean 3dSpotting read&write boolean miniMapSpotting read&write boolean nametag read&write boolean 3pCam read&write boolean regenerateHealth read&write teamKillCountForKick read&write number teamKillValueForKick read&write number teamKillValueIncrease read&write number teamKillValueDecreasePerSecond read&write number teamKillKickForBan read&write number idleTimeout read&write number idleBanRounds read&write number roundStartPlayerCount read&write number roundRestartPlayerCount read&write number roundLockdownCountdown read&write number vehicleSpawnAllowed read&write boolean vehicleSpawnDelay read&write number soldierHealth read&write number playerRespawnTime read&write number playerManDownTime read&write number bulletDamage read&write number gameModeCounter read&write number onlySquadLeaderSpawn read&write boolean premiumStatus read&write boolean ranked read&write boolean unlockMode read&write number gamePassword only unranked string Available Venice Unleashed Variables are: name renark type description DestructionEnabled read&write SuppressionMultiplier read&write DesertingAllowed read&write VehicleDisablingEnabled read&write HighPerformanceReplication read&write ServerBanner read&write string FrequencyMode read&write SpectatorCount read&write SunFlareEnabled read&write ColorCorrectionEnabled read&write TimeScale read&write SquadSize read&write FadeOutAll write only FadeInAll write only","title":"Variables"},{"location":"general/plugin/meta/","text":"Plugin meta.yaml The plugins meta.yaml describes multiple properties of a plugin, currently it should looke like this: #name of the plugin name : \"Test Plugin\" #description of the plugin description : \"plugin to test the rcon plugin interface\" #author name author : \"Multivitamin <david.kartnaller@gmail.com>\" #the version string for the plugin version : \"1.0.0\" #plugin backend (options: \"BF3\", \"VU\"), when \"BF3\" is chosen then it will run on Venice Unleashed Servers and Vanilla BF3 Servers backend : \"BF3\" #plugin entry point entry : \"index.js\" #dependencies which are mandatory for this plugin dependency : [] #require other dependencies optionalDependency : - Other Plugin vars : #arbitary key to identify the config entry in the config object - name : \"foo\" #meaningful description which can describe a key on the webinterface description : \"set a value for foo\" #type of the value which gets used, available types are: #string, boolean, number type : \"string\" #default value which will be set if there is a null value default : \"baz\" - name : \"bar\" description : \"set a value for bar\" type : \"number\" default : 0 General Variable Schema field optional type description name NO string the field key identifier description NO string the field descriptor type NO string type of the field multiline YES boolean only used with string type vars YES array of objects only used with array type conditions YES array of objects conditionals in order to hide / display field in frontend Allowed Field Types and optional fields string displays a textfield number displays a number input boolean displays a checkbox strings allows array of strings select displays a select field with multiple input types array allows nested variable configuration Conditions type This allows for a more dynamic configuration approach. It enables fields based on certain conditions Example Configuration: vars : # bar is a boolean - name : \"bar\" description : \"...\" type : \"boolean\" # baz is a select field with 2 options \"optionA\" and \"optionB\" - name : \"baz\" description : \"...\" type : \"select\" options : optionA : descriptor for optionA optionB : descriptor for optionB - name : \"foo\" description : \"...\" type : \"string\" conditions : - baz : \"optionA\" bar : true - baz : \"optionB Field foo will only be displayed when: baz equals \"optionA\" AND bar equals true OR baz equals \"optionB\" Dependencies Plugins can have dependency and optionalDependency those can be defined in the top section of the plugin config, these dependencies must be installed beforehand. Those dependencies are identified by the plugin meta.yaml name. The difference between dependency and optionalDependency is that if a dependency defined under dependency has not been found the plugin itself then wont start, where a dependency under optionalDependency will start regardless","title":"Meta"},{"location":"general/plugin/overview/","text":"Plugin Concept Each Battlefield Instance gets its own worker assigned where it can run their Plugin inside, this allows to run possible blocking Plugins not affecting other instances because the NodeJS main event loop gets blocked. Plugin Installation There is a dedicated Folder for Plugins, in order to create a new Plugin simply create an additional sub folder and create 2 files with following structure | root |-- plugins |---- dev //here you can put all plugins you want to install manually |---- :instanceid: //the instance id of your server where you want to test plugins |------ :uuid: //a generated uuid for your plugin |-------- meta.yaml |-------- index.js meta.yaml meta.yaml will hold the basic configurations of your plugin More details about the file layoout can be found here index.js this is the entry point for your plugin and should export a single function More details about the file layoout can be found here Developing Plugins In order to develop Plugins you can create a folder inside your plugins folder and call it dev inside this folder you can create a new folder in which your plugin resides You then can download the plugin normally via your Instances Plugin page! (You might need to do a reload after creating your new plugin) In order to update the plugin to your instance you just \"redownload\" it Publishing If you want other people to be able to use your rcon plugin you can let them install it via a repository, for this you will need to put your plugin into a github repository and provide the commit string and github repository url to a repository provider like this one Limitations If you use dependencies from yarn or npm then you will need to have those in your repository predownloaded aswell since vurcon does not automatically npm install these!","title":"Overview"},{"location":"general/plugin/overview/#plugin-concept","text":"Each Battlefield Instance gets its own worker assigned where it can run their Plugin inside, this allows to run possible blocking Plugins not affecting other instances because the NodeJS main event loop gets blocked.","title":"Plugin Concept"},{"location":"general/plugin/overview/#plugin-installation","text":"There is a dedicated Folder for Plugins, in order to create a new Plugin simply create an additional sub folder and create 2 files with following structure | root |-- plugins |---- dev //here you can put all plugins you want to install manually |---- :instanceid: //the instance id of your server where you want to test plugins |------ :uuid: //a generated uuid for your plugin |-------- meta.yaml |-------- index.js meta.yaml meta.yaml will hold the basic configurations of your plugin More details about the file layoout can be found here index.js this is the entry point for your plugin and should export a single function More details about the file layoout can be found here","title":"Plugin Installation"},{"location":"general/plugin/overview/#developing-plugins","text":"In order to develop Plugins you can create a folder inside your plugins folder and call it dev inside this folder you can create a new folder in which your plugin resides You then can download the plugin normally via your Instances Plugin page! (You might need to do a reload after creating your new plugin) In order to update the plugin to your instance you just \"redownload\" it","title":"Developing Plugins"},{"location":"general/plugin/overview/#publishing","text":"If you want other people to be able to use your rcon plugin you can let them install it via a repository, for this you will need to put your plugin into a github repository and provide the commit string and github repository url to a repository provider like this one","title":"Publishing"},{"location":"general/plugin/repository/","text":"About this Repository Plugin Repositories provide a place to collect and share VeniceRCON Plugins, it is a central place to download VeniceRCON plugins. If you want to create your own repository you can clone this repository and add it in your VeniceRCON's config.yaml ! repository.yaml This is the main file from where VeniceRCON will get plugin informations from. At the moment there is a single key named plugins which is an array with following fields: field type description username string github username repository string repository of the user commit string the commit which should be downloaded An example would look like: plugins : - username : \"Multivit4min\" repository : \"VeniceRCON-showcase-plugin\" commit : \"476b6fdadfaf35431fcdeec0bc4cba73e0135328\" - username : \"Multivit4min\" repository : \"VeniceRCON-metrics-plugin\" commit : \"476b6fdadfaf35431fcdeec0bc4cba73e0135328\" You can add this repository via webinterface to your instance","title":"Repository"},{"location":"general/plugin/repository/#about-this-repository","text":"Plugin Repositories provide a place to collect and share VeniceRCON Plugins, it is a central place to download VeniceRCON plugins. If you want to create your own repository you can clone this repository and add it in your VeniceRCON's config.yaml !","title":"About this Repository"},{"location":"general/plugin/script/","text":"A Plugin should export a single function which receives a single argument which consists of following parameters: Config Properties These are the keys which you receive as first argument of your function callback name type config Object battlefield Battlefield dependency Object logger Logger router PluginRouter store PluginStore engine Engine module . exports = ({ logger }) => { logger . info ( \"Hello from plugin test\" ) router . get ( \"somename\" , ({ next }) -> next ({ message : \"Hello from the plugin\" })) } Custom Commands Venice Unleashed might implement custom commands for rcon which are being provided by mods, in order to use non default commands you can do it with the battlefield.createCommand function: battlefield //sends the command \"player.isAlive\" with a single argument //consecutive arguments can be set by adding another argument to the //createCommand function . createCommand ( \"player.isAlive\" , name ) //this function sets how the response will be formatted //by default this callback gets called with an array of \"Words\" //when you do not expect a response you can omit this line //documentation about a \"Word\" can be found here: //https://multivit4min.github.io/vu-rcon/classes/word.html . format ( words => words [ 0 ]. toBoolean ()) //this finally dispatches the command and sends it to the server //this function returns a promise which gets resolved and has the //response from the format callback . send () Custom Events All Events which are not recognized by the query will be dispatched via the catchall event named \"event\" : //register an eventhandler with name \"event\" battlefield . on ( \"event\" , ({ event , words }) => { /* this logs the event name which has been called */ console . log ( event ) /** * this is an array of words * documentation what properties a Word has can be found here: * https://multivit4min.github.io/vu-rcon/classes/word.html */ console . log ( words ) })","title":"Script"},{"location":"general/plugin/types/Engine/","text":"Engine Internal useable functions for vurcon related data export interface Engine { /** this event gets emitted when frontend got variable changes */ on ( event : \"varsChanged\" , callback : ( data : VarsChangedEventProps ) => void ) : this /** * this will respond with a string of permissions a guid might have * it will only respond with data when the user has an account on vurcon * and connected his soldier with his vurcon account */ requestPlayerPermissions ( guid : string ) : Promise < string [] > }","title":"Engine"},{"location":"general/plugin/types/Logger/","text":"Logger Logger is a simple way to communicate to the Webinterface, you can communicate info messages, error messages or other export interface Logger { info ( message : string ) : void warn ( message : string ) : void error ( message : string ) : void }","title":"Logger"},{"location":"general/plugin/types/PluginRouter/","text":"Plugin Router The Plugin Router enables to receive data and respond http requests from the VeniceRCON API messages will be received from /api/plugins/{instanceId}/{pluginName}/{route} . instanaceId is the id of the instance the plugin runs on\\ pluginName is the name of the plugin which will be identified by its folder name\\ route is the route defined in the router Note For route parameter only ^[\\w\\d]+$ is allowed! declare type Context = { /** possible payload which has been sent **/ body : any /** respond with data back to the frontend */ send : ( data : any ) => void } declare type RouterCallback = ( ctx : Context ) => void export interface PluginRouter { /** GET requests */ get ( name : string , callback : PluginRouter.RouterCallback ) : PluginRouter /** POST requests */ post ( name : string , callback : PluginRouter.RouterCallback ) : PluginRouter /** PATCH requests */ patch ( name : string , callback : PluginRouter.RouterCallback ) : PluginRouter /** DELETE requests */ delete ( name : string , callback : PluginRouter.RouterCallback ) : PluginRouter }","title":"PluginRouter"},{"location":"general/plugin/types/PluginStore/","text":"PluginStore a store to save simple data in order to persist over plugin restarts export interface PluginStore { /** sets data to the store which can be retrieved via .get */ set ( key : string , value : any ) : void /** retrieves data by a certain key which has been set via the .save function */ get ( key : string ) : any /** resets the store */ clear () : void }","title":"PluginStore"},{"location":"general/socket/","text":"Socket In order to connect with the Websocket we use Socket.io. To be able to connect to it and retrieve a list of instances you will need to send yout jwt token! Doing this with the Manager would look like following: //insert your jwt token here const JWT_TOKEN = \"\" //insert your backend address here const url = \"\" //this creates a socket.io manager export const manager = new Manager ( url , { //tell the socket not to connect automatically //you can connect later with socket.connect() autoConnect : false , //this tells socket.io to only use websocket as transport //if you want to have the option for long polling you can delete this line transports : [ \"websocket\" ] }) //tell the socket to connect to the main namespace //only the default namespace under `\"/\"` will be used export const socket : Socket = manager . socket ( \"/\" , { //this sets the JWT_TOKEN with which socket.io will authenticate with auth : { auth_token : JWT_TOKEN } })","title":"General"},{"location":"general/socket/instance/","text":"INSTANCE#ADD /** * socket got added to an instance * @property {object} event * @property {number} event.id the instance which has been changed * @property {object} event.state current state of the instance */ socket . on ( \"INSTANCE#ADD\" , event => { console . log ( \"got added to instance\" , event . id , event . state . serverinfo . name ) }) INSTANCE#UPDATE /** * instance property has been changed inside the state * @property {object} event * @property {number} event.id the instance which has been changed * @property {[string, string|number|boolean|undefined|(number|string|boolean)[]][]>} event.changes */ socket . on ( \"INSTANCE#UPDATE\" , event => { console . log ( `received updates for instance with id ${ event . id } ` , event . changes ) }) INSTANCE#REMOVE /** * removes instance, either permissions have been revoked or instance has been deleted * @property {object} event * @property {number} event.id the instance which should get removed */ socket . on ( \"INSTANCE#REMOVE\" , event => { console . log ( `removed from instance ${ event . id } ` ) }) INSTANCE#CHAT /** * gets emitted when a chat event gets received from the server * @property {object} event tbd */ socket . on ( \"INSTANCE#CHAT\" , event => { //do stuff here }) INSTANCE#KILL /** * gets emitted when a kill event gets received from the server * @property {object} event tbd */ socket . on ( \"INSTANCE#KILL\" , event => { //do stuff here }) INSTANCE#LOG /** * gets emitted when one or more log messages gets received * @property {object[]} event */ socket . on ( \"INSTANCE#LOG\" , event => { //do stuff here }) INSTANCE#CONSOLE /** * the received / sent console events * in order to enable this event please check documentation under SELF#CMD_FEATURE * @property {object} event * @property {object[]} event.messages messages which has been sent/received */ socket . on ( \"INSTANCE#CONSOLE\" , event => { //do stuff here })","title":"Instance"},{"location":"general/socket/self/","text":"SELF#PERMISSION_UPDATE /** * gets fired when own permissions have been updated */ socket . on ( \"SELF#PERMISSION_UPDATE\" , () => { //get new permissions via /api/auth/whoami }) SELF#CMD_FEATURE /** * this enables a specific feature for this socket connection */ /** this payload enables to get raw console commands to be received */ const payload = { //the instanceid for which console commands should be enabled instance : 123 , //this is a constant name : \"raw\" , //if set to false it will disable the feature after having it set to true set : true } socket . emit ( \"SELF#CMD_FEATURE\" , payload )","title":"Self"}]}